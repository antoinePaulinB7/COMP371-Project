#include <iostream>
#include <string>
#include <map>
#include <list>
#define GLEW_STATIC 1

#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/common.hpp>
#include "shaders.h"
#include "Model.h"
#include <time.h>
#include <algorithm>
#include <list>
#include <vector>

//define namespaces for glm and c++ std
using namespace glm;
using namespace std;

#pragma region unitCubes
int createUnitCubeVertexArrayObject()
{
	// Cube model (position, colors)
	glm::vec3 vertexArray[] = {
		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f), //left - grey
		glm::vec3(-0.5f,-0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(-0.5f, 0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f),

		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(-0.5f, 0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(-0.5f, 0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),

		glm::vec3(0.5f, 0.5f,-0.5f), glm::vec3(1.0f, 1.0f, 1.0f), // far - white
		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(-0.5f, 0.5f,-0.5f), glm::vec3(1.0f, 1.0f, 1.0f),

		glm::vec3(0.5f, 0.5f,-0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(0.5f,-0.5f,-0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(1.0f, 1.0f, 1.0f),

		glm::vec3(0.5f,-0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f), // bottom - grey
		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(0.5f,-0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),

		glm::vec3(0.5f,-0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(-0.5f,-0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),

		glm::vec3(-0.5f, 0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f), // near - white
		glm::vec3(-0.5f,-0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(0.5f,-0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),

		glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(-0.5f, 0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(0.5f,-0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),

		glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f), // right - grey
		glm::vec3(0.5f,-0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(0.5f, 0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),

		glm::vec3(0.5f,-0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(0.5f,-0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f),

		glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f), // top - grey
		glm::vec3(0.5f, 0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(-0.5f, 0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),

		glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(-0.5f, 0.5f,-0.5f), glm::vec3(0.7f, 0.7f, 0.7f),
		glm::vec3(-0.5f, 0.5f, 0.5f), glm::vec3(0.7f, 0.7f, 0.7f)
	};

	// Create a vertex array
	GLuint vertexArrayObject;
	glGenVertexArrays(1, &vertexArrayObject);
	glBindVertexArray(vertexArrayObject);

	// Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
	GLuint vertexBufferObject;
	glGenBuffers(1, &vertexBufferObject);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertexArray), vertexArray, GL_STATIC_DRAW);

	glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
		3,                   // size
		GL_FLOAT,            // type
		GL_FALSE,            // normalized?
		2 * sizeof(glm::vec3), // stride - each vertex contain 2 vec3 (position, color)
		(void*)0             // array buffer offset
	);
	glEnableVertexAttribArray(0);


	glVertexAttribPointer(1,                            // attribute 1 matches aColor in Vertex Shader
		3,
		GL_FLOAT,
		GL_FALSE,
		2 * sizeof(glm::vec3),
		(void*)sizeof(glm::vec3)      // color is offseted a vec3 (comes after position)
	);
	glEnableVertexAttribArray(1);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

	return vertexArrayObject;
}

int createVertexArrayObjectU3()
{
	glm::vec3 vertexArray[] = {
		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(1.0f, 0.0f, 1.0f),
		glm::vec3(-0.5f,-0.5f, 0.5f), glm::vec3(0.0f, 1.0f, 1.0f),
		glm::vec3(-0.5f, 0.5f, 0.5f), glm::vec3(1.0f, 0.0f, 1.0f),

		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(1.0f, 0.0f, 1.0f),
		glm::vec3(-0.5f, 0.5f, 0.5f), glm::vec3(0.0f, 1.0f, 1.0f),
		glm::vec3(-0.5f, 0.5f,-0.5f), glm::vec3(1.0f, 0.0f, 0.0f),

		glm::vec3(0.5f, 0.5f,-0.5f), glm::vec3(0.2f, 0.0f, 0.0f),
		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(0.2f, 0.0f, 0.0f),
		glm::vec3(-0.5f, 0.5f,-0.5f), glm::vec3(0.2f, 0.0f, 0.0f),

		glm::vec3(0.5f, 0.5f,-0.5f), glm::vec3(0.2f, 0.0f, 0.0f),
		glm::vec3(0.5f,-0.5f,-0.5f), glm::vec3(0.2f, 0.0f, 0.0f),
		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(0.2f, 0.0f, 0.0f),

		glm::vec3(0.5f,-0.5f, 0.5f), glm::vec3(1.0f, 0.0f, 0.0f),
		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(1.0f, 0.0f, 1.0f),
		glm::vec3(0.5f,-0.5f,-0.5f), glm::vec3(0.0f, 0.0f, 1.0f),

		glm::vec3(0.5f,-0.5f, 0.5f), glm::vec3(0.0f, 1.0f, 1.0f),
		glm::vec3(-0.5f,-0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(-0.5f,-0.5f,-0.5f), glm::vec3(1.0f, 0.0f, 1.0f),

		glm::vec3(-0.5f, 0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(-0.5f,-0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(0.5f,-0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),

		glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(-0.5f, 0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),
		glm::vec3(0.5f,-0.5f, 0.5f), glm::vec3(1.0f, 1.0f, 1.0f),

		glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(1.0f, 0.0f, 1.0f),
		glm::vec3(0.5f,-0.5f,-0.5f), glm::vec3(0.0f, 0.1f, 0.0f),
		glm::vec3(0.5f, 0.5f,-0.5f), glm::vec3(1.0f, 0.0f, 1.0f),

		glm::vec3(0.5f,-0.5f,-0.5f), glm::vec3(1.0f, 0.0f, 1.0f),
		glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(0.0f, 0.1f, 0.0f),
		glm::vec3(0.5f,-0.5f, 0.5f), glm::vec3(0.0f, 1.0f, 1.0f),

		glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(1.0f, 0.0f, 1.0f),
		glm::vec3(0.5f, 0.5f,-0.5f), glm::vec3(0.0f, 0.1f, 0.0f),
		glm::vec3(-0.5f, 0.5f,-0.5f), glm::vec3(0.0f, 1.0f, 1.0f),

		glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(0.0f, 1.0f, 0.0f),
		glm::vec3(-0.5f, 0.5f,-0.5f), glm::vec3(0.0f, 0.0f, 1.0f),
		glm::vec3(-0.5f, 0.5f, 0.5f), glm::vec3(0.0f, 1.0f, 0.0f)
	};

	// Create a vertex array
	GLuint vertexArrayObject;
	glGenVertexArrays(1, &vertexArrayObject);
	glBindVertexArray(vertexArrayObject);

	// Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
	GLuint vertexBufferObject;
	glGenBuffers(1, &vertexBufferObject);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertexArray), vertexArray, GL_STATIC_DRAW);

	glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
		3,                   // size
		GL_FLOAT,            // type
		GL_FALSE,            // normalized?
		2 * sizeof(glm::vec3), // stride - each vertex contain 2 vec3 (position, color)
		(void*)0             // array buffer offset
	);
	glEnableVertexAttribArray(0);


	glVertexAttribPointer(1,                            // attribute 1 matches aColor in Vertex Shader
		3,
		GL_FLOAT,
		GL_FALSE,
		2 * sizeof(glm::vec3),
		(void*)sizeof(glm::vec3)      // color is offseted a vec3 (comes after position)
	);
	glEnableVertexAttribArray(1);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

	return vertexArrayObject;
}

int createVertexArrayObjectR4()
{
	// Cube model

	// Straight from the lab code, except I translated the vertices to start at 0,0,0 because otherwise my brain melts.
	vec3 vertexArray[] = {  // position, color
		vec3(0.0f, 0.0f, 0.0f), vec3(1.0f, 0.0f, 0.0f), //left - red
		vec3(0.0f, 0.0f, 1.0f), vec3(1.0f, 0.0f, 0.0f),
		vec3(0.0f, 1.0f, 1.0f), vec3(1.0f, 0.0f, 0.0f),

		vec3(0.0f, 0.0f, 0.0f), vec3(1.0f, 0.0f, 0.0f),
		vec3(0.0f, 1.0f, 1.0f), vec3(1.0f, 0.0f, 0.0f),
		vec3(0.0f, 1.0f, 0.0f), vec3(1.0f, 0.0f, 0.0f),

		vec3(1.0f, 1.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f), // far - blue
		vec3(0.0f, 0.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f),
		vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f),

		vec3(1.0f, 1.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f),
		vec3(1.0f, 0.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f),
		vec3(0.0f, 0.0f, 0.0f), vec3(0.0f, 0.0f, 1.0f),

		vec3(1.0f, 0.0f, 1.0f), vec3(0.0f, 1.0f, 1.0f), // bottom - turquoise
		vec3(0.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 1.0f),
		vec3(1.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 1.0f),

		vec3(1.0f, 0.0f, 1.0f), vec3(0.0f, 1.0f, 1.0f),
		vec3(0.0f, 0.0f, 1.0f), vec3(0.0f, 1.0f, 1.0f),
		vec3(0.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 1.0f),

		vec3(0.0f, 1.0f, 1.0f), vec3(0.0f, 1.0f, 0.0f), // near - green
		vec3(0.0f, 0.0f, 1.0f), vec3(0.0f, 1.0f, 0.0f),
		vec3(1.0f, 0.0f, 1.0f), vec3(0.0f, 1.0f, 0.0f),

		vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 1.0f, 0.0f),
		vec3(0.0f, 1.0f, 1.0f), vec3(0.0f, 1.0f, 0.0f),
		vec3(1.0f, 0.0f, 1.0f), vec3(0.0f, 1.0f, 0.0f),

		vec3(1.0f, 1.0f, 1.0f), vec3(1.0f, 0.0f, 1.0f), // right - purple
		vec3(1.0f, 0.0f, 0.0f), vec3(1.0f, 0.0f, 1.0f),
		vec3(1.0f, 1.0f, 0.0f), vec3(1.0f, 0.0f, 1.0f),

		vec3(1.0f, 0.0f, 0.0f), vec3(1.0f, 0.0f, 1.0f),
		vec3(1.0f, 1.0f, 1.0f), vec3(1.0f, 0.0f, 1.0f),
		vec3(1.0f, 0.0f, 1.0f), vec3(1.0f, 0.0f, 1.0f),

		vec3(1.0f, 1.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f), // top - yellow
		vec3(1.0f, 1.0f, 0.0f), vec3(1.0f, 1.0f, 0.0f),
		vec3(0.0f, 1.0f, 0.0f), vec3(1.0f, 1.0f, 0.0f),

		vec3(1.0f, 1.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f),
		vec3(0.0f, 1.0f, 0.0f), vec3(1.0f, 1.0f, 0.0f),
		vec3(0.0f, 1.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f)
	};


	// Create a vertex array
	GLuint vertexArrayObject;
	glGenVertexArrays(1, &vertexArrayObject);
	glBindVertexArray(vertexArrayObject);


	// Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
	GLuint vertexBufferObject;
	glGenBuffers(1, &vertexBufferObject);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertexArray), vertexArray, GL_STATIC_DRAW);

	glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
		3,                   // size
		GL_FLOAT,            // type
		GL_FALSE,            // normalized?
		2 * sizeof(vec3), // stride - each vertex contain 2 vec3 (position, color)
		(void*)0             // array buffer offset
	);
	glEnableVertexAttribArray(0);


	glVertexAttribPointer(1,                            // attribute 1 matches aColor in Vertex Shader
		3,
		GL_FLOAT,
		GL_FALSE,
		2 * sizeof(vec3),
		(void*)sizeof(vec3)      // color is offseted a vec3 (comes after position)
	);
	glEnableVertexAttribArray(1);

	return vertexArrayObject;
}
#pragma endregion

#pragma region sphere
// Sphere vertices from : https://github.com/EvanDime/COMP371-ass1/blob/master/Assigment%202/SphereModel.cpp?fbclid=IwAR37yc63I8KK7vYaQkxRpec6SJhy2M8G6AKRKzPyAFHdT9NoMFLTxURhxS8
// Sphere model(position, normal, color)
static const glm::vec3 vertexArray[] = {
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.173648, 0.000000, -0.984808), glm::vec3(0.173648, 0.000000, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.030154, -0.984808), glm::vec3(0.171010, 0.030154, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.342020, 0.000000, -0.939693), glm::vec3(0.342020, 0.000000, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, 0.059391, -0.939693), glm::vec3(0.336824, 0.059391, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.500000, 0.000000, -0.866025), glm::vec3(0.500000, 0.000000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.086824, -0.866025), glm::vec3(0.492404, 0.086824, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.642788, 0.000000, -0.766044), glm::vec3(0.642788, 0.000000, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, 0.111619, -0.766044), glm::vec3(0.633022, 0.111619, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.766044, 0.000000, -0.642788), glm::vec3(0.766044, 0.000000, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, 0.133022, -0.642788), glm::vec3(0.754407, 0.133022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.866025, 0.000000, -0.500000), glm::vec3(0.866025, 0.000000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, 0.150384, -0.500000), glm::vec3(0.852869, 0.150384, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.939693, 0.000000, -0.342020), glm::vec3(0.939693, 0.000000, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, 0.163176, -0.342020), glm::vec3(0.925417, 0.163176, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.984808, 0.000000, -0.173648), glm::vec3(0.984808, 0.000000, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.969846, 0.171010, -0.173648), glm::vec3(0.969846, 0.171010, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(1.000000, 0.000000, 0.000000), glm::vec3(1.000000, 0.000000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.984808, 0.173648, 0.000000), glm::vec3(0.984808, 0.173648, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.984808, 0.000000, 0.173648), glm::vec3(0.984808, 0.000000, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.969846, 0.171010, 0.173648), glm::vec3(0.969846, 0.171010, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.939693, 0.000000, 0.342020), glm::vec3(0.939693, 0.000000, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, 0.163176, 0.342020), glm::vec3(0.925417, 0.163176, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.866025, 0.000000, 0.500000), glm::vec3(0.866025, 0.000000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, 0.150384, 0.500000), glm::vec3(0.852869, 0.150384, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.766044, 0.000000, 0.642788), glm::vec3(0.766044, 0.000000, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, 0.133022, 0.642788), glm::vec3(0.754407, 0.133022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.642788, 0.000000, 0.766044), glm::vec3(0.642788, 0.000000, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, 0.111619, 0.766044), glm::vec3(0.633022, 0.111619, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.500000, 0.000000, 0.866025), glm::vec3(0.500000, 0.000000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.086824, 0.866025), glm::vec3(0.492404, 0.086824, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.342020, 0.000000, 0.939693), glm::vec3(0.342020, 0.000000, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, 0.059391, 0.939693), glm::vec3(0.336824, 0.059391, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.173648, 0.000000, 0.984808), glm::vec3(0.173648, 0.000000, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.030154, 0.984808), glm::vec3(0.171010, 0.030154, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.030154, 0.984808), glm::vec3(0.171010, 0.030154, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, 0.059391, 0.984808), glm::vec3(0.163176, 0.059391, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, 0.059391, 0.939693), glm::vec3(0.336824, 0.059391, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.116978, 0.939693), glm::vec3(0.321394, 0.116978, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.086824, 0.866025), glm::vec3(0.492404, 0.086824, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, 0.171010, 0.866025), glm::vec3(0.469846, 0.171010, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, 0.111619, 0.766044), glm::vec3(0.633022, 0.111619, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, 0.219846, 0.766044), glm::vec3(0.604023, 0.219846, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, 0.133022, 0.642788), glm::vec3(0.754407, 0.133022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, 0.262003, 0.642788), glm::vec3(0.719846, 0.262003, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, 0.150384, 0.500000), glm::vec3(0.852869, 0.150384, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, 0.296198, 0.500000), glm::vec3(0.813798, 0.296198, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, 0.163176, 0.342020), glm::vec3(0.925417, 0.163176, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.883022, 0.321394, 0.342020), glm::vec3(0.883022, 0.321394, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.969846, 0.171010, 0.173648), glm::vec3(0.969846, 0.171010, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, 0.336824, 0.173648), glm::vec3(0.925417, 0.336824, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.984808, 0.173648, 0.000000), glm::vec3(0.984808, 0.173648, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.939693, 0.342020, 0.000000), glm::vec3(0.939693, 0.342020, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.969846, 0.171010, -0.173648), glm::vec3(0.969846, 0.171010, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, 0.336824, -0.173648), glm::vec3(0.925417, 0.336824, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, 0.163176, -0.342020), glm::vec3(0.925417, 0.163176, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.883022, 0.321394, -0.342020), glm::vec3(0.883022, 0.321394, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, 0.150384, -0.500000), glm::vec3(0.852869, 0.150384, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, 0.296198, -0.500000), glm::vec3(0.813798, 0.296198, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, 0.133022, -0.642788), glm::vec3(0.754407, 0.133022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, 0.262003, -0.642788), glm::vec3(0.719846, 0.262003, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, 0.111619, -0.766044), glm::vec3(0.633022, 0.111619, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, 0.219846, -0.766044), glm::vec3(0.604023, 0.219846, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.086824, -0.866025), glm::vec3(0.492404, 0.086824, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, 0.171010, -0.866025), glm::vec3(0.469846, 0.171010, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, 0.059391, -0.939693), glm::vec3(0.336824, 0.059391, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.116978, -0.939693), glm::vec3(0.321394, 0.116978, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.030154, -0.984808), glm::vec3(0.171010, 0.030154, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, 0.059391, -0.984808), glm::vec3(0.163176, 0.059391, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, 0.059391, -0.984808), glm::vec3(0.163176, 0.059391, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, 0.086824, -0.984808), glm::vec3(0.150384, 0.086824, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.116978, -0.939693), glm::vec3(0.321394, 0.116978, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, 0.171010, -0.939693), glm::vec3(0.296198, 0.171010, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, 0.171010, -0.866025), glm::vec3(0.469846, 0.171010, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, 0.250000, -0.866025), glm::vec3(0.433013, 0.250000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, 0.219846, -0.766044), glm::vec3(0.604023, 0.219846, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, 0.321394, -0.766044), glm::vec3(0.556670, 0.321394, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, 0.262003, -0.642788), glm::vec3(0.719846, 0.262003, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, 0.383022, -0.642788), glm::vec3(0.663414, 0.383022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, 0.296198, -0.500000), glm::vec3(0.813798, 0.296198, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.750000, 0.433013, -0.500000), glm::vec3(0.750000, 0.433013, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.883022, 0.321394, -0.342020), glm::vec3(0.883022, 0.321394, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, 0.469846, -0.342020), glm::vec3(0.813798, 0.469846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, 0.336824, -0.173648), glm::vec3(0.925417, 0.336824, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, 0.492404, -0.173648), glm::vec3(0.852869, 0.492404, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.939693, 0.342020, 0.000000), glm::vec3(0.939693, 0.342020, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.866025, 0.500000, 0.000000), glm::vec3(0.866025, 0.500000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, 0.336824, 0.173648), glm::vec3(0.925417, 0.336824, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, 0.492404, 0.173648), glm::vec3(0.852869, 0.492404, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.883022, 0.321394, 0.342020), glm::vec3(0.883022, 0.321394, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, 0.469846, 0.342020), glm::vec3(0.813798, 0.469846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, 0.296198, 0.500000), glm::vec3(0.813798, 0.296198, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.750000, 0.433013, 0.500000), glm::vec3(0.750000, 0.433013, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, 0.262003, 0.642788), glm::vec3(0.719846, 0.262003, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, 0.383022, 0.642788), glm::vec3(0.663414, 0.383022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, 0.219846, 0.766044), glm::vec3(0.604023, 0.219846, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, 0.321394, 0.766044), glm::vec3(0.556670, 0.321394, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, 0.171010, 0.866025), glm::vec3(0.469846, 0.171010, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, 0.250000, 0.866025), glm::vec3(0.433013, 0.250000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.116978, 0.939693), glm::vec3(0.321394, 0.116978, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, 0.171010, 0.939693), glm::vec3(0.296198, 0.171010, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, 0.059391, 0.984808), glm::vec3(0.163176, 0.059391, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, 0.086824, 0.984808), glm::vec3(0.150384, 0.086824, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, 0.086824, 0.984808), glm::vec3(0.150384, 0.086824, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, 0.111619, 0.984808), glm::vec3(0.133022, 0.111619, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, 0.171010, 0.939693), glm::vec3(0.296198, 0.171010, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, 0.219846, 0.939693), glm::vec3(0.262003, 0.219846, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, 0.250000, 0.866025), glm::vec3(0.433013, 0.250000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, 0.321394, 0.866025), glm::vec3(0.383022, 0.321394, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, 0.321394, 0.766044), glm::vec3(0.556670, 0.321394, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.413176, 0.766044), glm::vec3(0.492404, 0.413176, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, 0.383022, 0.642788), glm::vec3(0.663414, 0.383022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.586824, 0.492404, 0.642788), glm::vec3(0.586824, 0.492404, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.750000, 0.433013, 0.500000), glm::vec3(0.750000, 0.433013, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, 0.556670, 0.500000), glm::vec3(0.663414, 0.556670, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, 0.469846, 0.342020), glm::vec3(0.813798, 0.469846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, 0.604023, 0.342020), glm::vec3(0.719846, 0.604023, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, 0.492404, 0.173648), glm::vec3(0.852869, 0.492404, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, 0.633022, 0.173648), glm::vec3(0.754407, 0.633022, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.866025, 0.500000, 0.000000), glm::vec3(0.866025, 0.500000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.766044, 0.642788, 0.000000), glm::vec3(0.766044, 0.642788, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, 0.492404, -0.173648), glm::vec3(0.852869, 0.492404, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, 0.633022, -0.173648), glm::vec3(0.754407, 0.633022, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, 0.469846, -0.342020), glm::vec3(0.813798, 0.469846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, 0.604023, -0.342020), glm::vec3(0.719846, 0.604023, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.750000, 0.433013, -0.500000), glm::vec3(0.750000, 0.433013, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, 0.556670, -0.500000), glm::vec3(0.663414, 0.556670, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, 0.383022, -0.642788), glm::vec3(0.663414, 0.383022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.586824, 0.492404, -0.642788), glm::vec3(0.586824, 0.492404, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, 0.321394, -0.766044), glm::vec3(0.556670, 0.321394, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.413176, -0.766044), glm::vec3(0.492404, 0.413176, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, 0.250000, -0.866025), glm::vec3(0.433013, 0.250000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, 0.321394, -0.866025), glm::vec3(0.383022, 0.321394, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, 0.171010, -0.939693), glm::vec3(0.296198, 0.171010, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, 0.219846, -0.939693), glm::vec3(0.262003, 0.219846, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, 0.086824, -0.984808), glm::vec3(0.150384, 0.086824, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, 0.111619, -0.984808), glm::vec3(0.133022, 0.111619, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, 0.111619, -0.984808), glm::vec3(0.133022, 0.111619, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, 0.133022, -0.984808), glm::vec3(0.111619, 0.133022, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, 0.219846, -0.939693), glm::vec3(0.262003, 0.219846, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, 0.262003, -0.939693), glm::vec3(0.219846, 0.262003, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, 0.321394, -0.866025), glm::vec3(0.383022, 0.321394, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.383022, -0.866025), glm::vec3(0.321394, 0.383022, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.413176, -0.766044), glm::vec3(0.492404, 0.413176, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.413176, 0.492404, -0.766044), glm::vec3(0.413176, 0.492404, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.586824, 0.492404, -0.642788), glm::vec3(0.586824, 0.492404, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.586824, -0.642788), glm::vec3(0.492404, 0.586824, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, 0.556670, -0.500000), glm::vec3(0.663414, 0.556670, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, 0.663414, -0.500000), glm::vec3(0.556670, 0.663414, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, 0.604023, -0.342020), glm::vec3(0.719846, 0.604023, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, 0.719846, -0.342020), glm::vec3(0.604023, 0.719846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, 0.633022, -0.173648), glm::vec3(0.754407, 0.633022, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, 0.754407, -0.173648), glm::vec3(0.633022, 0.754407, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.766044, 0.642788, 0.000000), glm::vec3(0.766044, 0.642788, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.642788, 0.766044, 0.000000), glm::vec3(0.642788, 0.766044, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, 0.633022, 0.173648), glm::vec3(0.754407, 0.633022, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, 0.754407, 0.173648), glm::vec3(0.633022, 0.754407, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, 0.604023, 0.342020), glm::vec3(0.719846, 0.604023, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, 0.719846, 0.342020), glm::vec3(0.604023, 0.719846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, 0.556670, 0.500000), glm::vec3(0.663414, 0.556670, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, 0.663414, 0.500000), glm::vec3(0.556670, 0.663414, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.586824, 0.492404, 0.642788), glm::vec3(0.586824, 0.492404, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.586824, 0.642788), glm::vec3(0.492404, 0.586824, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.413176, 0.766044), glm::vec3(0.492404, 0.413176, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.413176, 0.492404, 0.766044), glm::vec3(0.413176, 0.492404, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, 0.321394, 0.866025), glm::vec3(0.383022, 0.321394, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.383022, 0.866025), glm::vec3(0.321394, 0.383022, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, 0.219846, 0.939693), glm::vec3(0.262003, 0.219846, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, 0.262003, 0.939693), glm::vec3(0.219846, 0.262003, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, 0.111619, 0.984808), glm::vec3(0.133022, 0.111619, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, 0.133022, 0.984808), glm::vec3(0.111619, 0.133022, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, 0.133022, 0.984808), glm::vec3(0.111619, 0.133022, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, 0.150384, 0.984808), glm::vec3(0.086824, 0.150384, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, 0.262003, 0.939693), glm::vec3(0.219846, 0.262003, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.296198, 0.939693), glm::vec3(0.171010, 0.296198, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.383022, 0.866025), glm::vec3(0.321394, 0.383022, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.250000, 0.433013, 0.866025), glm::vec3(0.250000, 0.433013, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.413176, 0.492404, 0.766044), glm::vec3(0.413176, 0.492404, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.556670, 0.766044), glm::vec3(0.321394, 0.556670, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.586824, 0.642788), glm::vec3(0.492404, 0.586824, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, 0.663414, 0.642788), glm::vec3(0.383022, 0.663414, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, 0.663414, 0.500000), glm::vec3(0.556670, 0.663414, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, 0.750000, 0.500000), glm::vec3(0.433013, 0.750000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, 0.719846, 0.342020), glm::vec3(0.604023, 0.719846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, 0.813798, 0.342020), glm::vec3(0.469846, 0.813798, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, 0.754407, 0.173648), glm::vec3(0.633022, 0.754407, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.852869, 0.173648), glm::vec3(0.492404, 0.852869, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.642788, 0.766044, 0.000000), glm::vec3(0.642788, 0.766044, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.500000, 0.866025, 0.000000), glm::vec3(0.500000, 0.866025, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, 0.754407, -0.173648), glm::vec3(0.633022, 0.754407, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.852869, -0.173648), glm::vec3(0.492404, 0.852869, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, 0.719846, -0.342020), glm::vec3(0.604023, 0.719846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, 0.813798, -0.342020), glm::vec3(0.469846, 0.813798, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, 0.663414, -0.500000), glm::vec3(0.556670, 0.663414, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, 0.750000, -0.500000), glm::vec3(0.433013, 0.750000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.586824, -0.642788), glm::vec3(0.492404, 0.586824, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, 0.663414, -0.642788), glm::vec3(0.383022, 0.663414, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.413176, 0.492404, -0.766044), glm::vec3(0.413176, 0.492404, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.556670, -0.766044), glm::vec3(0.321394, 0.556670, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.383022, -0.866025), glm::vec3(0.321394, 0.383022, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.250000, 0.433013, -0.866025), glm::vec3(0.250000, 0.433013, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, 0.262003, -0.939693), glm::vec3(0.219846, 0.262003, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.296198, -0.939693), glm::vec3(0.171010, 0.296198, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, 0.133022, -0.984808), glm::vec3(0.111619, 0.133022, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, 0.150384, -0.984808), glm::vec3(0.086824, 0.150384, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, 0.150384, -0.984808), glm::vec3(0.086824, 0.150384, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, 0.163176, -0.984808), glm::vec3(0.059391, 0.163176, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.296198, -0.939693), glm::vec3(0.171010, 0.296198, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.116978, 0.321394, -0.939693), glm::vec3(0.116978, 0.321394, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.250000, 0.433013, -0.866025), glm::vec3(0.250000, 0.433013, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.469846, -0.866025), glm::vec3(0.171010, 0.469846, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.556670, -0.766044), glm::vec3(0.321394, 0.556670, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, 0.604023, -0.766044), glm::vec3(0.219846, 0.604023, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, 0.663414, -0.642788), glm::vec3(0.383022, 0.663414, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, 0.719846, -0.642788), glm::vec3(0.262003, 0.719846, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, 0.750000, -0.500000), glm::vec3(0.433013, 0.750000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, 0.813798, -0.500000), glm::vec3(0.296198, 0.813798, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, 0.813798, -0.342020), glm::vec3(0.469846, 0.813798, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.883022, -0.342020), glm::vec3(0.321394, 0.883022, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.852869, -0.173648), glm::vec3(0.492404, 0.852869, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, 0.925417, -0.173648), glm::vec3(0.336824, 0.925417, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.500000, 0.866025, 0.000000), glm::vec3(0.500000, 0.866025, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.342020, 0.939693, 0.000000), glm::vec3(0.342020, 0.939693, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, 0.852869, 0.173648), glm::vec3(0.492404, 0.852869, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, 0.925417, 0.173648), glm::vec3(0.336824, 0.925417, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, 0.813798, 0.342020), glm::vec3(0.469846, 0.813798, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.883022, 0.342020), glm::vec3(0.321394, 0.883022, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, 0.750000, 0.500000), glm::vec3(0.433013, 0.750000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, 0.813798, 0.500000), glm::vec3(0.296198, 0.813798, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, 0.663414, 0.642788), glm::vec3(0.383022, 0.663414, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, 0.719846, 0.642788), glm::vec3(0.262003, 0.719846, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.556670, 0.766044), glm::vec3(0.321394, 0.556670, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, 0.604023, 0.766044), glm::vec3(0.219846, 0.604023, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.250000, 0.433013, 0.866025), glm::vec3(0.250000, 0.433013, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.469846, 0.866025), glm::vec3(0.171010, 0.469846, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.296198, 0.939693), glm::vec3(0.171010, 0.296198, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.116978, 0.321394, 0.939693), glm::vec3(0.116978, 0.321394, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, 0.150384, 0.984808), glm::vec3(0.086824, 0.150384, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, 0.163176, 0.984808), glm::vec3(0.059391, 0.163176, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, 0.163176, 0.984808), glm::vec3(0.059391, 0.163176, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.030154, 0.171010, 0.984808), glm::vec3(0.030154, 0.171010, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.116978, 0.321394, 0.939693), glm::vec3(0.116978, 0.321394, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, 0.336824, 0.939693), glm::vec3(0.059391, 0.336824, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.469846, 0.866025), glm::vec3(0.171010, 0.469846, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, 0.492404, 0.866025), glm::vec3(0.086824, 0.492404, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, 0.604023, 0.766044), glm::vec3(0.219846, 0.604023, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, 0.633022, 0.766044), glm::vec3(0.111619, 0.633022, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, 0.719846, 0.642788), glm::vec3(0.262003, 0.719846, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, 0.754407, 0.642788), glm::vec3(0.133022, 0.754407, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, 0.813798, 0.500000), glm::vec3(0.296198, 0.813798, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, 0.852869, 0.500000), glm::vec3(0.150384, 0.852869, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.883022, 0.342020), glm::vec3(0.321394, 0.883022, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, 0.925417, 0.342020), glm::vec3(0.163176, 0.925417, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, 0.925417, 0.173648), glm::vec3(0.336824, 0.925417, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.969846, 0.173648), glm::vec3(0.171010, 0.969846, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.342020, 0.939693, 0.000000), glm::vec3(0.342020, 0.939693, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.173648, 0.984808, 0.000000), glm::vec3(0.173648, 0.984808, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, 0.925417, -0.173648), glm::vec3(0.336824, 0.925417, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.969846, -0.173648), glm::vec3(0.171010, 0.969846, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, 0.883022, -0.342020), glm::vec3(0.321394, 0.883022, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, 0.925417, -0.342020), glm::vec3(0.163176, 0.925417, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, 0.813798, -0.500000), glm::vec3(0.296198, 0.813798, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, 0.852869, -0.500000), glm::vec3(0.150384, 0.852869, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, 0.719846, -0.642788), glm::vec3(0.262003, 0.719846, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, 0.754407, -0.642788), glm::vec3(0.133022, 0.754407, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, 0.604023, -0.766044), glm::vec3(0.219846, 0.604023, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, 0.633022, -0.766044), glm::vec3(0.111619, 0.633022, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.469846, -0.866025), glm::vec3(0.171010, 0.469846, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, 0.492404, -0.866025), glm::vec3(0.086824, 0.492404, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.116978, 0.321394, -0.939693), glm::vec3(0.116978, 0.321394, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, 0.336824, -0.939693), glm::vec3(0.059391, 0.336824, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, 0.163176, -0.984808), glm::vec3(0.059391, 0.163176, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.030154, 0.171010, -0.984808), glm::vec3(0.030154, 0.171010, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.030154, 0.171010, -0.984808), glm::vec3(0.030154, 0.171010, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.173648, -0.984808), glm::vec3(0.000000, 0.173648, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, 0.336824, -0.939693), glm::vec3(0.059391, 0.336824, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.342020, -0.939693), glm::vec3(0.000000, 0.342020, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, 0.492404, -0.866025), glm::vec3(0.086824, 0.492404, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.500000, -0.866025), glm::vec3(0.000000, 0.500000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, 0.633022, -0.766044), glm::vec3(0.111619, 0.633022, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.642788, -0.766044), glm::vec3(0.000000, 0.642788, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, 0.754407, -0.642788), glm::vec3(0.133022, 0.754407, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.766044, -0.642788), glm::vec3(0.000000, 0.766044, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, 0.852869, -0.500000), glm::vec3(0.150384, 0.852869, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.866025, -0.500000), glm::vec3(0.000000, 0.866025, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, 0.925417, -0.342020), glm::vec3(0.163176, 0.925417, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.939693, -0.342020), glm::vec3(0.000000, 0.939693, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.969846, -0.173648), glm::vec3(0.171010, 0.969846, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.984808, -0.173648), glm::vec3(0.000000, 0.984808, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.173648, 0.984808, 0.000000), glm::vec3(0.173648, 0.984808, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 1.000000, 0.000000), glm::vec3(0.000000, 1.000000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, 0.969846, 0.173648), glm::vec3(0.171010, 0.969846, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.984808, 0.173648), glm::vec3(0.000000, 0.984808, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, 0.925417, 0.342020), glm::vec3(0.163176, 0.925417, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.939693, 0.342020), glm::vec3(0.000000, 0.939693, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, 0.852869, 0.500000), glm::vec3(0.150384, 0.852869, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.866025, 0.500000), glm::vec3(0.000000, 0.866025, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, 0.754407, 0.642788), glm::vec3(0.133022, 0.754407, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.766044, 0.642788), glm::vec3(0.000000, 0.766044, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, 0.633022, 0.766044), glm::vec3(0.111619, 0.633022, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.642788, 0.766044), glm::vec3(0.000000, 0.642788, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, 0.492404, 0.866025), glm::vec3(0.086824, 0.492404, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.500000, 0.866025), glm::vec3(0.000000, 0.500000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, 0.336824, 0.939693), glm::vec3(0.059391, 0.336824, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.342020, 0.939693), glm::vec3(0.000000, 0.342020, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.030154, 0.171010, 0.984808), glm::vec3(0.030154, 0.171010, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.173648, 0.984808), glm::vec3(0.000000, 0.173648, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.173648, 0.984808), glm::vec3(0.000000, 0.173648, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.030154, 0.171010, 0.984808), glm::vec3(-0.030154, 0.171010, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.342020, 0.939693), glm::vec3(0.000000, 0.342020, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, 0.336824, 0.939693), glm::vec3(-0.059391, 0.336824, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.500000, 0.866025), glm::vec3(0.000000, 0.500000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, 0.492404, 0.866025), glm::vec3(-0.086824, 0.492404, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.642788, 0.766044), glm::vec3(0.000000, 0.642788, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, 0.633022, 0.766044), glm::vec3(-0.111619, 0.633022, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.766044, 0.642788), glm::vec3(0.000000, 0.766044, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, 0.754407, 0.642788), glm::vec3(-0.133022, 0.754407, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.866025, 0.500000), glm::vec3(0.000000, 0.866025, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, 0.852869, 0.500000), glm::vec3(-0.150384, 0.852869, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.939693, 0.342020), glm::vec3(0.000000, 0.939693, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, 0.925417, 0.342020), glm::vec3(-0.163176, 0.925417, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.984808, 0.173648), glm::vec3(0.000000, 0.984808, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.969846, 0.173648), glm::vec3(-0.171010, 0.969846, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 1.000000, 0.000000), glm::vec3(0.000000, 1.000000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.173648, 0.984808, 0.000000), glm::vec3(-0.173648, 0.984808, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.984808, -0.173648), glm::vec3(0.000000, 0.984808, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.969846, -0.173648), glm::vec3(-0.171010, 0.969846, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.939693, -0.342020), glm::vec3(0.000000, 0.939693, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, 0.925417, -0.342020), glm::vec3(-0.163176, 0.925417, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.866025, -0.500000), glm::vec3(0.000000, 0.866025, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, 0.852869, -0.500000), glm::vec3(-0.150384, 0.852869, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.766044, -0.642788), glm::vec3(0.000000, 0.766044, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, 0.754407, -0.642788), glm::vec3(-0.133022, 0.754407, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.642788, -0.766044), glm::vec3(0.000000, 0.642788, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, 0.633022, -0.766044), glm::vec3(-0.111619, 0.633022, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.500000, -0.866025), glm::vec3(0.000000, 0.500000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, 0.492404, -0.866025), glm::vec3(-0.086824, 0.492404, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.342020, -0.939693), glm::vec3(0.000000, 0.342020, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, 0.336824, -0.939693), glm::vec3(-0.059391, 0.336824, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.173648, -0.984808), glm::vec3(0.000000, 0.173648, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.030154, 0.171010, -0.984808), glm::vec3(-0.030154, 0.171010, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.030154, 0.171010, -0.984808), glm::vec3(-0.030154, 0.171010, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, 0.163176, -0.984808), glm::vec3(-0.059391, 0.163176, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, 0.336824, -0.939693), glm::vec3(-0.059391, 0.336824, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.116978, 0.321394, -0.939693), glm::vec3(-0.116978, 0.321394, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, 0.492404, -0.866025), glm::vec3(-0.086824, 0.492404, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.469846, -0.866025), glm::vec3(-0.171010, 0.469846, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, 0.633022, -0.766044), glm::vec3(-0.111619, 0.633022, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, 0.604023, -0.766044), glm::vec3(-0.219846, 0.604023, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, 0.754407, -0.642788), glm::vec3(-0.133022, 0.754407, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, 0.719846, -0.642788), glm::vec3(-0.262003, 0.719846, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, 0.852869, -0.500000), glm::vec3(-0.150384, 0.852869, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, 0.813798, -0.500000), glm::vec3(-0.296198, 0.813798, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, 0.925417, -0.342020), glm::vec3(-0.163176, 0.925417, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.883022, -0.342020), glm::vec3(-0.321394, 0.883022, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.969846, -0.173648), glm::vec3(-0.171010, 0.969846, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, 0.925417, -0.173648), glm::vec3(-0.336824, 0.925417, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.173648, 0.984808, 0.000000), glm::vec3(-0.173648, 0.984808, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.342020, 0.939693, 0.000000), glm::vec3(-0.342020, 0.939693, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.969846, 0.173648), glm::vec3(-0.171010, 0.969846, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, 0.925417, 0.173648), glm::vec3(-0.336824, 0.925417, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, 0.925417, 0.342020), glm::vec3(-0.163176, 0.925417, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.883022, 0.342020), glm::vec3(-0.321394, 0.883022, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, 0.852869, 0.500000), glm::vec3(-0.150384, 0.852869, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, 0.813798, 0.500000), glm::vec3(-0.296198, 0.813798, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, 0.754407, 0.642788), glm::vec3(-0.133022, 0.754407, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, 0.719846, 0.642788), glm::vec3(-0.262003, 0.719846, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, 0.633022, 0.766044), glm::vec3(-0.111619, 0.633022, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, 0.604023, 0.766044), glm::vec3(-0.219846, 0.604023, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, 0.492404, 0.866025), glm::vec3(-0.086824, 0.492404, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.469846, 0.866025), glm::vec3(-0.171010, 0.469846, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, 0.336824, 0.939693), glm::vec3(-0.059391, 0.336824, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.116978, 0.321394, 0.939693), glm::vec3(-0.116978, 0.321394, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.030154, 0.171010, 0.984808), glm::vec3(-0.030154, 0.171010, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, 0.163176, 0.984808), glm::vec3(-0.059391, 0.163176, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, 0.163176, 0.984808), glm::vec3(-0.059391, 0.163176, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, 0.150384, 0.984808), glm::vec3(-0.086824, 0.150384, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.116978, 0.321394, 0.939693), glm::vec3(-0.116978, 0.321394, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.296198, 0.939693), glm::vec3(-0.171010, 0.296198, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.469846, 0.866025), glm::vec3(-0.171010, 0.469846, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.250000, 0.433013, 0.866025), glm::vec3(-0.250000, 0.433013, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, 0.604023, 0.766044), glm::vec3(-0.219846, 0.604023, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.556670, 0.766044), glm::vec3(-0.321394, 0.556670, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, 0.719846, 0.642788), glm::vec3(-0.262003, 0.719846, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, 0.663414, 0.642788), glm::vec3(-0.383022, 0.663414, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, 0.813798, 0.500000), glm::vec3(-0.296198, 0.813798, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, 0.750000, 0.500000), glm::vec3(-0.433013, 0.750000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.883022, 0.342020), glm::vec3(-0.321394, 0.883022, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, 0.813798, 0.342020), glm::vec3(-0.469846, 0.813798, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, 0.925417, 0.173648), glm::vec3(-0.336824, 0.925417, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.852869, 0.173648), glm::vec3(-0.492404, 0.852869, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.342020, 0.939693, 0.000000), glm::vec3(-0.342020, 0.939693, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.500000, 0.866025, 0.000000), glm::vec3(-0.500000, 0.866025, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, 0.925417, -0.173648), glm::vec3(-0.336824, 0.925417, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.852869, -0.173648), glm::vec3(-0.492404, 0.852869, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.883022, -0.342020), glm::vec3(-0.321394, 0.883022, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, 0.813798, -0.342020), glm::vec3(-0.469846, 0.813798, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, 0.813798, -0.500000), glm::vec3(-0.296198, 0.813798, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, 0.750000, -0.500000), glm::vec3(-0.433013, 0.750000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, 0.719846, -0.642788), glm::vec3(-0.262003, 0.719846, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, 0.663414, -0.642788), glm::vec3(-0.383022, 0.663414, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, 0.604023, -0.766044), glm::vec3(-0.219846, 0.604023, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.556670, -0.766044), glm::vec3(-0.321394, 0.556670, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.469846, -0.866025), glm::vec3(-0.171010, 0.469846, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.250000, 0.433013, -0.866025), glm::vec3(-0.250000, 0.433013, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.116978, 0.321394, -0.939693), glm::vec3(-0.116978, 0.321394, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.296198, -0.939693), glm::vec3(-0.171010, 0.296198, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, 0.163176, -0.984808), glm::vec3(-0.059391, 0.163176, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, 0.150384, -0.984808), glm::vec3(-0.086824, 0.150384, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, 0.150384, -0.984808), glm::vec3(-0.086824, 0.150384, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, 0.133022, -0.984808), glm::vec3(-0.111619, 0.133022, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.296198, -0.939693), glm::vec3(-0.171010, 0.296198, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, 0.262003, -0.939693), glm::vec3(-0.219846, 0.262003, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.250000, 0.433013, -0.866025), glm::vec3(-0.250000, 0.433013, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.383022, -0.866025), glm::vec3(-0.321394, 0.383022, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.556670, -0.766044), glm::vec3(-0.321394, 0.556670, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.413176, 0.492404, -0.766044), glm::vec3(-0.413176, 0.492404, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, 0.663414, -0.642788), glm::vec3(-0.383022, 0.663414, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.586824, -0.642788), glm::vec3(-0.492404, 0.586824, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, 0.750000, -0.500000), glm::vec3(-0.433013, 0.750000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, 0.663414, -0.500000), glm::vec3(-0.556670, 0.663414, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, 0.813798, -0.342020), glm::vec3(-0.469846, 0.813798, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, 0.719846, -0.342020), glm::vec3(-0.604023, 0.719846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.852869, -0.173648), glm::vec3(-0.492404, 0.852869, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, 0.754407, -0.173648), glm::vec3(-0.633022, 0.754407, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.500000, 0.866025, 0.000000), glm::vec3(-0.500000, 0.866025, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.642788, 0.766044, 0.000000), glm::vec3(-0.642788, 0.766044, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.852869, 0.173648), glm::vec3(-0.492404, 0.852869, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, 0.754407, 0.173648), glm::vec3(-0.633022, 0.754407, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, 0.813798, 0.342020), glm::vec3(-0.469846, 0.813798, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, 0.719846, 0.342020), glm::vec3(-0.604023, 0.719846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, 0.750000, 0.500000), glm::vec3(-0.433013, 0.750000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, 0.663414, 0.500000), glm::vec3(-0.556670, 0.663414, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, 0.663414, 0.642788), glm::vec3(-0.383022, 0.663414, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.586824, 0.642788), glm::vec3(-0.492404, 0.586824, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.556670, 0.766044), glm::vec3(-0.321394, 0.556670, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.413176, 0.492404, 0.766044), glm::vec3(-0.413176, 0.492404, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.250000, 0.433013, 0.866025), glm::vec3(-0.250000, 0.433013, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.383022, 0.866025), glm::vec3(-0.321394, 0.383022, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.296198, 0.939693), glm::vec3(-0.171010, 0.296198, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, 0.262003, 0.939693), glm::vec3(-0.219846, 0.262003, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, 0.150384, 0.984808), glm::vec3(-0.086824, 0.150384, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, 0.133022, 0.984808), glm::vec3(-0.111619, 0.133022, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, 0.133022, 0.984808), glm::vec3(-0.111619, 0.133022, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, 0.111619, 0.984808), glm::vec3(-0.133022, 0.111619, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, 0.262003, 0.939693), glm::vec3(-0.219846, 0.262003, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, 0.219846, 0.939693), glm::vec3(-0.262003, 0.219846, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.383022, 0.866025), glm::vec3(-0.321394, 0.383022, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, 0.321394, 0.866025), glm::vec3(-0.383022, 0.321394, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.413176, 0.492404, 0.766044), glm::vec3(-0.413176, 0.492404, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.413176, 0.766044), glm::vec3(-0.492404, 0.413176, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.586824, 0.642788), glm::vec3(-0.492404, 0.586824, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.586824, 0.492404, 0.642788), glm::vec3(-0.586824, 0.492404, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, 0.663414, 0.500000), glm::vec3(-0.556670, 0.663414, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, 0.556670, 0.500000), glm::vec3(-0.663414, 0.556670, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, 0.719846, 0.342020), glm::vec3(-0.604023, 0.719846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, 0.604023, 0.342020), glm::vec3(-0.719846, 0.604023, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, 0.754407, 0.173648), glm::vec3(-0.633022, 0.754407, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, 0.633022, 0.173648), glm::vec3(-0.754407, 0.633022, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.642788, 0.766044, 0.000000), glm::vec3(-0.642788, 0.766044, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.766044, 0.642788, 0.000000), glm::vec3(-0.766044, 0.642788, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, 0.754407, -0.173648), glm::vec3(-0.633022, 0.754407, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, 0.633022, -0.173648), glm::vec3(-0.754407, 0.633022, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, 0.719846, -0.342020), glm::vec3(-0.604023, 0.719846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, 0.604023, -0.342020), glm::vec3(-0.719846, 0.604023, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, 0.663414, -0.500000), glm::vec3(-0.556670, 0.663414, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, 0.556670, -0.500000), glm::vec3(-0.663414, 0.556670, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.586824, -0.642788), glm::vec3(-0.492404, 0.586824, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.586824, 0.492404, -0.642788), glm::vec3(-0.586824, 0.492404, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.413176, 0.492404, -0.766044), glm::vec3(-0.413176, 0.492404, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.413176, -0.766044), glm::vec3(-0.492404, 0.413176, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.383022, -0.866025), glm::vec3(-0.321394, 0.383022, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, 0.321394, -0.866025), glm::vec3(-0.383022, 0.321394, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, 0.262003, -0.939693), glm::vec3(-0.219846, 0.262003, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, 0.219846, -0.939693), glm::vec3(-0.262003, 0.219846, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, 0.133022, -0.984808), glm::vec3(-0.111619, 0.133022, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, 0.111619, -0.984808), glm::vec3(-0.133022, 0.111619, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, 0.111619, -0.984808), glm::vec3(-0.133022, 0.111619, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, 0.086824, -0.984808), glm::vec3(-0.150384, 0.086824, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, 0.219846, -0.939693), glm::vec3(-0.262003, 0.219846, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, 0.171010, -0.939693), glm::vec3(-0.296198, 0.171010, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, 0.321394, -0.866025), glm::vec3(-0.383022, 0.321394, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, 0.250000, -0.866025), glm::vec3(-0.433013, 0.250000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.413176, -0.766044), glm::vec3(-0.492404, 0.413176, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, 0.321394, -0.766044), glm::vec3(-0.556670, 0.321394, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.586824, 0.492404, -0.642788), glm::vec3(-0.586824, 0.492404, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, 0.383022, -0.642788), glm::vec3(-0.663414, 0.383022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, 0.556670, -0.500000), glm::vec3(-0.663414, 0.556670, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.750000, 0.433013, -0.500000), glm::vec3(-0.750000, 0.433013, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, 0.604023, -0.342020), glm::vec3(-0.719846, 0.604023, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, 0.469846, -0.342020), glm::vec3(-0.813798, 0.469846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, 0.633022, -0.173648), glm::vec3(-0.754407, 0.633022, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, 0.492404, -0.173648), glm::vec3(-0.852869, 0.492404, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.766044, 0.642788, 0.000000), glm::vec3(-0.766044, 0.642788, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.866025, 0.500000, 0.000000), glm::vec3(-0.866025, 0.500000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, 0.633022, 0.173648), glm::vec3(-0.754407, 0.633022, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, 0.492404, 0.173648), glm::vec3(-0.852869, 0.492404, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, 0.604023, 0.342020), glm::vec3(-0.719846, 0.604023, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, 0.469846, 0.342020), glm::vec3(-0.813798, 0.469846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, 0.556670, 0.500000), glm::vec3(-0.663414, 0.556670, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.750000, 0.433013, 0.500000), glm::vec3(-0.750000, 0.433013, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.586824, 0.492404, 0.642788), glm::vec3(-0.586824, 0.492404, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, 0.383022, 0.642788), glm::vec3(-0.663414, 0.383022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.413176, 0.766044), glm::vec3(-0.492404, 0.413176, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, 0.321394, 0.766044), glm::vec3(-0.556670, 0.321394, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, 0.321394, 0.866025), glm::vec3(-0.383022, 0.321394, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, 0.250000, 0.866025), glm::vec3(-0.433013, 0.250000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, 0.219846, 0.939693), glm::vec3(-0.262003, 0.219846, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, 0.171010, 0.939693), glm::vec3(-0.296198, 0.171010, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, 0.111619, 0.984808), glm::vec3(-0.133022, 0.111619, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, 0.086824, 0.984808), glm::vec3(-0.150384, 0.086824, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, 0.086824, 0.984808), glm::vec3(-0.150384, 0.086824, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, 0.059391, 0.984808), glm::vec3(-0.163176, 0.059391, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, 0.171010, 0.939693), glm::vec3(-0.296198, 0.171010, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.116978, 0.939693), glm::vec3(-0.321394, 0.116978, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, 0.250000, 0.866025), glm::vec3(-0.433013, 0.250000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, 0.171010, 0.866025), glm::vec3(-0.469846, 0.171010, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, 0.321394, 0.766044), glm::vec3(-0.556670, 0.321394, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, 0.219846, 0.766044), glm::vec3(-0.604023, 0.219846, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, 0.383022, 0.642788), glm::vec3(-0.663414, 0.383022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, 0.262003, 0.642788), glm::vec3(-0.719846, 0.262003, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.750000, 0.433013, 0.500000), glm::vec3(-0.750000, 0.433013, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, 0.296198, 0.500000), glm::vec3(-0.813798, 0.296198, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, 0.469846, 0.342020), glm::vec3(-0.813798, 0.469846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.883022, 0.321394, 0.342020), glm::vec3(-0.883022, 0.321394, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, 0.492404, 0.173648), glm::vec3(-0.852869, 0.492404, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, 0.336824, 0.173648), glm::vec3(-0.925417, 0.336824, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.866025, 0.500000, 0.000000), glm::vec3(-0.866025, 0.500000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.939693, 0.342020, 0.000000), glm::vec3(-0.939693, 0.342020, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, 0.492404, -0.173648), glm::vec3(-0.852869, 0.492404, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, 0.336824, -0.173648), glm::vec3(-0.925417, 0.336824, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, 0.469846, -0.342020), glm::vec3(-0.813798, 0.469846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.883022, 0.321394, -0.342020), glm::vec3(-0.883022, 0.321394, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.750000, 0.433013, -0.500000), glm::vec3(-0.750000, 0.433013, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, 0.296198, -0.500000), glm::vec3(-0.813798, 0.296198, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, 0.383022, -0.642788), glm::vec3(-0.663414, 0.383022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, 0.262003, -0.642788), glm::vec3(-0.719846, 0.262003, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, 0.321394, -0.766044), glm::vec3(-0.556670, 0.321394, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, 0.219846, -0.766044), glm::vec3(-0.604023, 0.219846, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, 0.250000, -0.866025), glm::vec3(-0.433013, 0.250000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, 0.171010, -0.866025), glm::vec3(-0.469846, 0.171010, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, 0.171010, -0.939693), glm::vec3(-0.296198, 0.171010, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.116978, -0.939693), glm::vec3(-0.321394, 0.116978, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, 0.086824, -0.984808), glm::vec3(-0.150384, 0.086824, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, 0.059391, -0.984808), glm::vec3(-0.163176, 0.059391, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, 0.059391, -0.984808), glm::vec3(-0.163176, 0.059391, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.030154, -0.984808), glm::vec3(-0.171010, 0.030154, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.116978, -0.939693), glm::vec3(-0.321394, 0.116978, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, 0.059391, -0.939693), glm::vec3(-0.336824, 0.059391, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, 0.171010, -0.866025), glm::vec3(-0.469846, 0.171010, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.086824, -0.866025), glm::vec3(-0.492404, 0.086824, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, 0.219846, -0.766044), glm::vec3(-0.604023, 0.219846, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, 0.111619, -0.766044), glm::vec3(-0.633022, 0.111619, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, 0.262003, -0.642788), glm::vec3(-0.719846, 0.262003, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, 0.133022, -0.642788), glm::vec3(-0.754407, 0.133022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, 0.296198, -0.500000), glm::vec3(-0.813798, 0.296198, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, 0.150384, -0.500000), glm::vec3(-0.852869, 0.150384, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.883022, 0.321394, -0.342020), glm::vec3(-0.883022, 0.321394, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, 0.163176, -0.342020), glm::vec3(-0.925417, 0.163176, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, 0.336824, -0.173648), glm::vec3(-0.925417, 0.336824, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.969846, 0.171010, -0.173648), glm::vec3(-0.969846, 0.171010, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.939693, 0.342020, 0.000000), glm::vec3(-0.939693, 0.342020, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.984808, 0.173648, 0.000000), glm::vec3(-0.984808, 0.173648, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, 0.336824, 0.173648), glm::vec3(-0.925417, 0.336824, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.969846, 0.171010, 0.173648), glm::vec3(-0.969846, 0.171010, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.883022, 0.321394, 0.342020), glm::vec3(-0.883022, 0.321394, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, 0.163176, 0.342020), glm::vec3(-0.925417, 0.163176, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, 0.296198, 0.500000), glm::vec3(-0.813798, 0.296198, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, 0.150384, 0.500000), glm::vec3(-0.852869, 0.150384, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, 0.262003, 0.642788), glm::vec3(-0.719846, 0.262003, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, 0.133022, 0.642788), glm::vec3(-0.754407, 0.133022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, 0.219846, 0.766044), glm::vec3(-0.604023, 0.219846, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, 0.111619, 0.766044), glm::vec3(-0.633022, 0.111619, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, 0.171010, 0.866025), glm::vec3(-0.469846, 0.171010, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.086824, 0.866025), glm::vec3(-0.492404, 0.086824, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, 0.116978, 0.939693), glm::vec3(-0.321394, 0.116978, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, 0.059391, 0.939693), glm::vec3(-0.336824, 0.059391, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, 0.059391, 0.984808), glm::vec3(-0.163176, 0.059391, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.030154, 0.984808), glm::vec3(-0.171010, 0.030154, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.030154, 0.984808), glm::vec3(-0.171010, 0.030154, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.173648, 0.000000, 0.984808), glm::vec3(-0.173648, 0.000000, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, 0.059391, 0.939693), glm::vec3(-0.336824, 0.059391, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.342020, 0.000000, 0.939693), glm::vec3(-0.342020, 0.000000, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.086824, 0.866025), glm::vec3(-0.492404, 0.086824, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.500000, 0.000000, 0.866025), glm::vec3(-0.500000, 0.000000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, 0.111619, 0.766044), glm::vec3(-0.633022, 0.111619, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.642788, 0.000000, 0.766044), glm::vec3(-0.642788, 0.000000, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, 0.133022, 0.642788), glm::vec3(-0.754407, 0.133022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.766044, 0.000000, 0.642788), glm::vec3(-0.766044, 0.000000, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, 0.150384, 0.500000), glm::vec3(-0.852869, 0.150384, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.866025, 0.000000, 0.500000), glm::vec3(-0.866025, 0.000000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, 0.163176, 0.342020), glm::vec3(-0.925417, 0.163176, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.939693, 0.000000, 0.342020), glm::vec3(-0.939693, 0.000000, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.969846, 0.171010, 0.173648), glm::vec3(-0.969846, 0.171010, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.984808, 0.000000, 0.173648), glm::vec3(-0.984808, 0.000000, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.984808, 0.173648, 0.000000), glm::vec3(-0.984808, 0.173648, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-1.000000, 0.000000, 0.000000), glm::vec3(-1.000000, 0.000000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.969846, 0.171010, -0.173648), glm::vec3(-0.969846, 0.171010, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.984808, 0.000000, -0.173648), glm::vec3(-0.984808, 0.000000, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, 0.163176, -0.342020), glm::vec3(-0.925417, 0.163176, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.939693, 0.000000, -0.342020), glm::vec3(-0.939693, 0.000000, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, 0.150384, -0.500000), glm::vec3(-0.852869, 0.150384, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.866025, 0.000000, -0.500000), glm::vec3(-0.866025, 0.000000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, 0.133022, -0.642788), glm::vec3(-0.754407, 0.133022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.766044, 0.000000, -0.642788), glm::vec3(-0.766044, 0.000000, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, 0.111619, -0.766044), glm::vec3(-0.633022, 0.111619, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.642788, 0.000000, -0.766044), glm::vec3(-0.642788, 0.000000, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, 0.086824, -0.866025), glm::vec3(-0.492404, 0.086824, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.500000, 0.000000, -0.866025), glm::vec3(-0.500000, 0.000000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, 0.059391, -0.939693), glm::vec3(-0.336824, 0.059391, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.342020, 0.000000, -0.939693), glm::vec3(-0.342020, 0.000000, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, 0.030154, -0.984808), glm::vec3(-0.171010, 0.030154, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.173648, 0.000000, -0.984808), glm::vec3(-0.173648, 0.000000, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.173648, 0.000000, -0.984808), glm::vec3(-0.173648, 0.000000, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.030154, -0.984808), glm::vec3(-0.171010, -0.030154, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.342020, 0.000000, -0.939693), glm::vec3(-0.342020, 0.000000, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, -0.059391, -0.939693), glm::vec3(-0.336824, -0.059391, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.500000, 0.000000, -0.866025), glm::vec3(-0.500000, 0.000000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.086824, -0.866025), glm::vec3(-0.492404, -0.086824, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.642788, 0.000000, -0.766044), glm::vec3(-0.642788, 0.000000, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, -0.111619, -0.766044), glm::vec3(-0.633022, -0.111619, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.766044, 0.000000, -0.642788), glm::vec3(-0.766044, 0.000000, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, -0.133022, -0.642788), glm::vec3(-0.754407, -0.133022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.866025, 0.000000, -0.500000), glm::vec3(-0.866025, 0.000000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, -0.150384, -0.500000), glm::vec3(-0.852869, -0.150384, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.939693, 0.000000, -0.342020), glm::vec3(-0.939693, 0.000000, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, -0.163176, -0.342020), glm::vec3(-0.925417, -0.163176, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.984808, 0.000000, -0.173648), glm::vec3(-0.984808, 0.000000, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.969846, -0.171010, -0.173648), glm::vec3(-0.969846, -0.171010, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-1.000000, 0.000000, 0.000000), glm::vec3(-1.000000, 0.000000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.984808, -0.173648, 0.000000), glm::vec3(-0.984808, -0.173648, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.984808, 0.000000, 0.173648), glm::vec3(-0.984808, 0.000000, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.969846, -0.171010, 0.173648), glm::vec3(-0.969846, -0.171010, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.939693, 0.000000, 0.342020), glm::vec3(-0.939693, 0.000000, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, -0.163176, 0.342020), glm::vec3(-0.925417, -0.163176, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.866025, 0.000000, 0.500000), glm::vec3(-0.866025, 0.000000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, -0.150384, 0.500000), glm::vec3(-0.852869, -0.150384, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.766044, 0.000000, 0.642788), glm::vec3(-0.766044, 0.000000, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, -0.133022, 0.642788), glm::vec3(-0.754407, -0.133022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.642788, 0.000000, 0.766044), glm::vec3(-0.642788, 0.000000, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, -0.111619, 0.766044), glm::vec3(-0.633022, -0.111619, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.500000, 0.000000, 0.866025), glm::vec3(-0.500000, 0.000000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.086824, 0.866025), glm::vec3(-0.492404, -0.086824, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.342020, 0.000000, 0.939693), glm::vec3(-0.342020, 0.000000, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, -0.059391, 0.939693), glm::vec3(-0.336824, -0.059391, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.173648, 0.000000, 0.984808), glm::vec3(-0.173648, 0.000000, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.030154, 0.984808), glm::vec3(-0.171010, -0.030154, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.030154, 0.984808), glm::vec3(-0.171010, -0.030154, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, -0.059391, 0.984808), glm::vec3(-0.163176, -0.059391, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, -0.059391, 0.939693), glm::vec3(-0.336824, -0.059391, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.116978, 0.939693), glm::vec3(-0.321394, -0.116978, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.086824, 0.866025), glm::vec3(-0.492404, -0.086824, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, -0.171010, 0.866025), glm::vec3(-0.469846, -0.171010, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, -0.111619, 0.766044), glm::vec3(-0.633022, -0.111619, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, -0.219846, 0.766044), glm::vec3(-0.604023, -0.219846, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, -0.133022, 0.642788), glm::vec3(-0.754407, -0.133022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, -0.262003, 0.642788), glm::vec3(-0.719846, -0.262003, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, -0.150384, 0.500000), glm::vec3(-0.852869, -0.150384, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, -0.296198, 0.500000), glm::vec3(-0.813798, -0.296198, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, -0.163176, 0.342020), glm::vec3(-0.925417, -0.163176, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.883022, -0.321394, 0.342020), glm::vec3(-0.883022, -0.321394, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.969846, -0.171010, 0.173648), glm::vec3(-0.969846, -0.171010, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, -0.336824, 0.173648), glm::vec3(-0.925417, -0.336824, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.984808, -0.173648, 0.000000), glm::vec3(-0.984808, -0.173648, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.939693, -0.342020, 0.000000), glm::vec3(-0.939693, -0.342020, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.969846, -0.171010, -0.173648), glm::vec3(-0.969846, -0.171010, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, -0.336824, -0.173648), glm::vec3(-0.925417, -0.336824, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, -0.163176, -0.342020), glm::vec3(-0.925417, -0.163176, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.883022, -0.321394, -0.342020), glm::vec3(-0.883022, -0.321394, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, -0.150384, -0.500000), glm::vec3(-0.852869, -0.150384, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, -0.296198, -0.500000), glm::vec3(-0.813798, -0.296198, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, -0.133022, -0.642788), glm::vec3(-0.754407, -0.133022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, -0.262003, -0.642788), glm::vec3(-0.719846, -0.262003, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, -0.111619, -0.766044), glm::vec3(-0.633022, -0.111619, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, -0.219846, -0.766044), glm::vec3(-0.604023, -0.219846, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.086824, -0.866025), glm::vec3(-0.492404, -0.086824, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, -0.171010, -0.866025), glm::vec3(-0.469846, -0.171010, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, -0.059391, -0.939693), glm::vec3(-0.336824, -0.059391, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.116978, -0.939693), glm::vec3(-0.321394, -0.116978, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.030154, -0.984808), glm::vec3(-0.171010, -0.030154, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, -0.059391, -0.984808), glm::vec3(-0.163176, -0.059391, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, -0.059391, -0.984808), glm::vec3(-0.163176, -0.059391, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, -0.086824, -0.984808), glm::vec3(-0.150384, -0.086824, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.116978, -0.939693), glm::vec3(-0.321394, -0.116978, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, -0.171010, -0.939693), glm::vec3(-0.296198, -0.171010, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, -0.171010, -0.866025), glm::vec3(-0.469846, -0.171010, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, -0.250000, -0.866025), glm::vec3(-0.433013, -0.250000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, -0.219846, -0.766044), glm::vec3(-0.604023, -0.219846, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, -0.321394, -0.766044), glm::vec3(-0.556670, -0.321394, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, -0.262003, -0.642788), glm::vec3(-0.719846, -0.262003, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, -0.383022, -0.642788), glm::vec3(-0.663414, -0.383022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, -0.296198, -0.500000), glm::vec3(-0.813798, -0.296198, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.750000, -0.433013, -0.500000), glm::vec3(-0.750000, -0.433013, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.883022, -0.321394, -0.342020), glm::vec3(-0.883022, -0.321394, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, -0.469846, -0.342020), glm::vec3(-0.813798, -0.469846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, -0.336824, -0.173648), glm::vec3(-0.925417, -0.336824, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, -0.492404, -0.173648), glm::vec3(-0.852869, -0.492404, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.939693, -0.342020, 0.000000), glm::vec3(-0.939693, -0.342020, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.866025, -0.500000, 0.000000), glm::vec3(-0.866025, -0.500000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.925417, -0.336824, 0.173648), glm::vec3(-0.925417, -0.336824, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, -0.492404, 0.173648), glm::vec3(-0.852869, -0.492404, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.883022, -0.321394, 0.342020), glm::vec3(-0.883022, -0.321394, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, -0.469846, 0.342020), glm::vec3(-0.813798, -0.469846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, -0.296198, 0.500000), glm::vec3(-0.813798, -0.296198, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.750000, -0.433013, 0.500000), glm::vec3(-0.750000, -0.433013, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, -0.262003, 0.642788), glm::vec3(-0.719846, -0.262003, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, -0.383022, 0.642788), glm::vec3(-0.663414, -0.383022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, -0.219846, 0.766044), glm::vec3(-0.604023, -0.219846, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, -0.321394, 0.766044), glm::vec3(-0.556670, -0.321394, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, -0.171010, 0.866025), glm::vec3(-0.469846, -0.171010, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, -0.250000, 0.866025), glm::vec3(-0.433013, -0.250000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.116978, 0.939693), glm::vec3(-0.321394, -0.116978, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, -0.171010, 0.939693), glm::vec3(-0.296198, -0.171010, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, -0.059391, 0.984808), glm::vec3(-0.163176, -0.059391, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, -0.086824, 0.984808), glm::vec3(-0.150384, -0.086824, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, -0.086824, 0.984808), glm::vec3(-0.150384, -0.086824, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, -0.111619, 0.984808), glm::vec3(-0.133022, -0.111619, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, -0.171010, 0.939693), glm::vec3(-0.296198, -0.171010, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, -0.219846, 0.939693), glm::vec3(-0.262003, -0.219846, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, -0.250000, 0.866025), glm::vec3(-0.433013, -0.250000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, -0.321394, 0.866025), glm::vec3(-0.383022, -0.321394, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, -0.321394, 0.766044), glm::vec3(-0.556670, -0.321394, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.413176, 0.766044), glm::vec3(-0.492404, -0.413176, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, -0.383022, 0.642788), glm::vec3(-0.663414, -0.383022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.586824, -0.492404, 0.642788), glm::vec3(-0.586824, -0.492404, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.750000, -0.433013, 0.500000), glm::vec3(-0.750000, -0.433013, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, -0.556670, 0.500000), glm::vec3(-0.663414, -0.556670, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, -0.469846, 0.342020), glm::vec3(-0.813798, -0.469846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, -0.604023, 0.342020), glm::vec3(-0.719846, -0.604023, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, -0.492404, 0.173648), glm::vec3(-0.852869, -0.492404, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, -0.633022, 0.173648), glm::vec3(-0.754407, -0.633022, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.866025, -0.500000, 0.000000), glm::vec3(-0.866025, -0.500000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.766044, -0.642788, 0.000000), glm::vec3(-0.766044, -0.642788, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.852869, -0.492404, -0.173648), glm::vec3(-0.852869, -0.492404, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, -0.633022, -0.173648), glm::vec3(-0.754407, -0.633022, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.813798, -0.469846, -0.342020), glm::vec3(-0.813798, -0.469846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, -0.604023, -0.342020), glm::vec3(-0.719846, -0.604023, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.750000, -0.433013, -0.500000), glm::vec3(-0.750000, -0.433013, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, -0.556670, -0.500000), glm::vec3(-0.663414, -0.556670, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, -0.383022, -0.642788), glm::vec3(-0.663414, -0.383022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.586824, -0.492404, -0.642788), glm::vec3(-0.586824, -0.492404, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, -0.321394, -0.766044), glm::vec3(-0.556670, -0.321394, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.413176, -0.766044), glm::vec3(-0.492404, -0.413176, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, -0.250000, -0.866025), glm::vec3(-0.433013, -0.250000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, -0.321394, -0.866025), glm::vec3(-0.383022, -0.321394, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, -0.171010, -0.939693), glm::vec3(-0.296198, -0.171010, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, -0.219846, -0.939693), glm::vec3(-0.262003, -0.219846, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, -0.086824, -0.984808), glm::vec3(-0.150384, -0.086824, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, -0.111619, -0.984808), glm::vec3(-0.133022, -0.111619, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, -0.111619, -0.984808), glm::vec3(-0.133022, -0.111619, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, -0.133022, -0.984808), glm::vec3(-0.111619, -0.133022, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, -0.219846, -0.939693), glm::vec3(-0.262003, -0.219846, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, -0.262003, -0.939693), glm::vec3(-0.219846, -0.262003, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, -0.321394, -0.866025), glm::vec3(-0.383022, -0.321394, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.383022, -0.866025), glm::vec3(-0.321394, -0.383022, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.413176, -0.766044), glm::vec3(-0.492404, -0.413176, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.413176, -0.492404, -0.766044), glm::vec3(-0.413176, -0.492404, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.586824, -0.492404, -0.642788), glm::vec3(-0.586824, -0.492404, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.586824, -0.642788), glm::vec3(-0.492404, -0.586824, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, -0.556670, -0.500000), glm::vec3(-0.663414, -0.556670, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, -0.663414, -0.500000), glm::vec3(-0.556670, -0.663414, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, -0.604023, -0.342020), glm::vec3(-0.719846, -0.604023, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, -0.719846, -0.342020), glm::vec3(-0.604023, -0.719846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, -0.633022, -0.173648), glm::vec3(-0.754407, -0.633022, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, -0.754407, -0.173648), glm::vec3(-0.633022, -0.754407, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.766044, -0.642788, 0.000000), glm::vec3(-0.766044, -0.642788, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.642788, -0.766044, 0.000000), glm::vec3(-0.642788, -0.766044, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.754407, -0.633022, 0.173648), glm::vec3(-0.754407, -0.633022, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, -0.754407, 0.173648), glm::vec3(-0.633022, -0.754407, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.719846, -0.604023, 0.342020), glm::vec3(-0.719846, -0.604023, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, -0.719846, 0.342020), glm::vec3(-0.604023, -0.719846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.663414, -0.556670, 0.500000), glm::vec3(-0.663414, -0.556670, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, -0.663414, 0.500000), glm::vec3(-0.556670, -0.663414, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.586824, -0.492404, 0.642788), glm::vec3(-0.586824, -0.492404, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.586824, 0.642788), glm::vec3(-0.492404, -0.586824, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.413176, 0.766044), glm::vec3(-0.492404, -0.413176, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.413176, -0.492404, 0.766044), glm::vec3(-0.413176, -0.492404, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, -0.321394, 0.866025), glm::vec3(-0.383022, -0.321394, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.383022, 0.866025), glm::vec3(-0.321394, -0.383022, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, -0.219846, 0.939693), glm::vec3(-0.262003, -0.219846, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, -0.262003, 0.939693), glm::vec3(-0.219846, -0.262003, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, -0.111619, 0.984808), glm::vec3(-0.133022, -0.111619, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, -0.133022, 0.984808), glm::vec3(-0.111619, -0.133022, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, -0.133022, 0.984808), glm::vec3(-0.111619, -0.133022, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, -0.150384, 0.984808), glm::vec3(-0.086824, -0.150384, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, -0.262003, 0.939693), glm::vec3(-0.219846, -0.262003, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.296198, 0.939693), glm::vec3(-0.171010, -0.296198, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.383022, 0.866025), glm::vec3(-0.321394, -0.383022, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.250000, -0.433013, 0.866025), glm::vec3(-0.250000, -0.433013, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.413176, -0.492404, 0.766044), glm::vec3(-0.413176, -0.492404, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.556670, 0.766044), glm::vec3(-0.321394, -0.556670, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.586824, 0.642788), glm::vec3(-0.492404, -0.586824, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, -0.663414, 0.642788), glm::vec3(-0.383022, -0.663414, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, -0.663414, 0.500000), glm::vec3(-0.556670, -0.663414, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, -0.750000, 0.500000), glm::vec3(-0.433013, -0.750000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, -0.719846, 0.342020), glm::vec3(-0.604023, -0.719846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, -0.813798, 0.342020), glm::vec3(-0.469846, -0.813798, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, -0.754407, 0.173648), glm::vec3(-0.633022, -0.754407, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.852869, 0.173648), glm::vec3(-0.492404, -0.852869, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.642788, -0.766044, 0.000000), glm::vec3(-0.642788, -0.766044, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.500000, -0.866025, 0.000000), glm::vec3(-0.500000, -0.866025, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.633022, -0.754407, -0.173648), glm::vec3(-0.633022, -0.754407, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.852869, -0.173648), glm::vec3(-0.492404, -0.852869, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.604023, -0.719846, -0.342020), glm::vec3(-0.604023, -0.719846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, -0.813798, -0.342020), glm::vec3(-0.469846, -0.813798, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.556670, -0.663414, -0.500000), glm::vec3(-0.556670, -0.663414, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, -0.750000, -0.500000), glm::vec3(-0.433013, -0.750000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.586824, -0.642788), glm::vec3(-0.492404, -0.586824, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, -0.663414, -0.642788), glm::vec3(-0.383022, -0.663414, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.413176, -0.492404, -0.766044), glm::vec3(-0.413176, -0.492404, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.556670, -0.766044), glm::vec3(-0.321394, -0.556670, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.383022, -0.866025), glm::vec3(-0.321394, -0.383022, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.250000, -0.433013, -0.866025), glm::vec3(-0.250000, -0.433013, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, -0.262003, -0.939693), glm::vec3(-0.219846, -0.262003, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.296198, -0.939693), glm::vec3(-0.171010, -0.296198, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, -0.133022, -0.984808), glm::vec3(-0.111619, -0.133022, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, -0.150384, -0.984808), glm::vec3(-0.086824, -0.150384, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, -0.150384, -0.984808), glm::vec3(-0.086824, -0.150384, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, -0.163176, -0.984808), glm::vec3(-0.059391, -0.163176, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.296198, -0.939693), glm::vec3(-0.171010, -0.296198, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.116978, -0.321394, -0.939693), glm::vec3(-0.116978, -0.321394, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.250000, -0.433013, -0.866025), glm::vec3(-0.250000, -0.433013, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.469846, -0.866025), glm::vec3(-0.171010, -0.469846, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.556670, -0.766044), glm::vec3(-0.321394, -0.556670, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, -0.604023, -0.766044), glm::vec3(-0.219846, -0.604023, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, -0.663414, -0.642788), glm::vec3(-0.383022, -0.663414, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, -0.719846, -0.642788), glm::vec3(-0.262003, -0.719846, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, -0.750000, -0.500000), glm::vec3(-0.433013, -0.750000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, -0.813798, -0.500000), glm::vec3(-0.296198, -0.813798, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, -0.813798, -0.342020), glm::vec3(-0.469846, -0.813798, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.883022, -0.342020), glm::vec3(-0.321394, -0.883022, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.852869, -0.173648), glm::vec3(-0.492404, -0.852869, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, -0.925417, -0.173648), glm::vec3(-0.336824, -0.925417, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.500000, -0.866025, 0.000000), glm::vec3(-0.500000, -0.866025, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.342020, -0.939693, 0.000000), glm::vec3(-0.342020, -0.939693, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.492404, -0.852869, 0.173648), glm::vec3(-0.492404, -0.852869, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, -0.925417, 0.173648), glm::vec3(-0.336824, -0.925417, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.469846, -0.813798, 0.342020), glm::vec3(-0.469846, -0.813798, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.883022, 0.342020), glm::vec3(-0.321394, -0.883022, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.433013, -0.750000, 0.500000), glm::vec3(-0.433013, -0.750000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, -0.813798, 0.500000), glm::vec3(-0.296198, -0.813798, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.383022, -0.663414, 0.642788), glm::vec3(-0.383022, -0.663414, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, -0.719846, 0.642788), glm::vec3(-0.262003, -0.719846, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.556670, 0.766044), glm::vec3(-0.321394, -0.556670, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, -0.604023, 0.766044), glm::vec3(-0.219846, -0.604023, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.250000, -0.433013, 0.866025), glm::vec3(-0.250000, -0.433013, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.469846, 0.866025), glm::vec3(-0.171010, -0.469846, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.296198, 0.939693), glm::vec3(-0.171010, -0.296198, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.116978, -0.321394, 0.939693), glm::vec3(-0.116978, -0.321394, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, -0.150384, 0.984808), glm::vec3(-0.086824, -0.150384, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, -0.163176, 0.984808), glm::vec3(-0.059391, -0.163176, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, -0.163176, 0.984808), glm::vec3(-0.059391, -0.163176, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.030154, -0.171010, 0.984808), glm::vec3(-0.030154, -0.171010, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.116978, -0.321394, 0.939693), glm::vec3(-0.116978, -0.321394, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, -0.336824, 0.939693), glm::vec3(-0.059391, -0.336824, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.469846, 0.866025), glm::vec3(-0.171010, -0.469846, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, -0.492404, 0.866025), glm::vec3(-0.086824, -0.492404, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, -0.604023, 0.766044), glm::vec3(-0.219846, -0.604023, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, -0.633022, 0.766044), glm::vec3(-0.111619, -0.633022, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, -0.719846, 0.642788), glm::vec3(-0.262003, -0.719846, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, -0.754407, 0.642788), glm::vec3(-0.133022, -0.754407, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, -0.813798, 0.500000), glm::vec3(-0.296198, -0.813798, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, -0.852869, 0.500000), glm::vec3(-0.150384, -0.852869, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.883022, 0.342020), glm::vec3(-0.321394, -0.883022, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, -0.925417, 0.342020), glm::vec3(-0.163176, -0.925417, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, -0.925417, 0.173648), glm::vec3(-0.336824, -0.925417, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.969846, 0.173648), glm::vec3(-0.171010, -0.969846, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.342020, -0.939693, 0.000000), glm::vec3(-0.342020, -0.939693, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.173648, -0.984808, 0.000000), glm::vec3(-0.173648, -0.984808, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.336824, -0.925417, -0.173648), glm::vec3(-0.336824, -0.925417, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.969846, -0.173648), glm::vec3(-0.171010, -0.969846, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.321394, -0.883022, -0.342020), glm::vec3(-0.321394, -0.883022, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, -0.925417, -0.342020), glm::vec3(-0.163176, -0.925417, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.296198, -0.813798, -0.500000), glm::vec3(-0.296198, -0.813798, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, -0.852869, -0.500000), glm::vec3(-0.150384, -0.852869, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.262003, -0.719846, -0.642788), glm::vec3(-0.262003, -0.719846, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, -0.754407, -0.642788), glm::vec3(-0.133022, -0.754407, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.219846, -0.604023, -0.766044), glm::vec3(-0.219846, -0.604023, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, -0.633022, -0.766044), glm::vec3(-0.111619, -0.633022, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.469846, -0.866025), glm::vec3(-0.171010, -0.469846, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, -0.492404, -0.866025), glm::vec3(-0.086824, -0.492404, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.116978, -0.321394, -0.939693), glm::vec3(-0.116978, -0.321394, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, -0.336824, -0.939693), glm::vec3(-0.059391, -0.336824, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, -0.163176, -0.984808), glm::vec3(-0.059391, -0.163176, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.030154, -0.171010, -0.984808), glm::vec3(-0.030154, -0.171010, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.030154, -0.171010, -0.984808), glm::vec3(-0.030154, -0.171010, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.173648, -0.984808), glm::vec3(-0.000000, -0.173648, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, -0.336824, -0.939693), glm::vec3(-0.059391, -0.336824, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.342020, -0.939693), glm::vec3(-0.000000, -0.342020, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, -0.492404, -0.866025), glm::vec3(-0.086824, -0.492404, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.500000, -0.866025), glm::vec3(-0.000000, -0.500000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, -0.633022, -0.766044), glm::vec3(-0.111619, -0.633022, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.642788, -0.766044), glm::vec3(-0.000000, -0.642788, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, -0.754407, -0.642788), glm::vec3(-0.133022, -0.754407, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.766044, -0.642788), glm::vec3(-0.000000, -0.766044, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, -0.852869, -0.500000), glm::vec3(-0.150384, -0.852869, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.866025, -0.500000), glm::vec3(-0.000000, -0.866025, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, -0.925417, -0.342020), glm::vec3(-0.163176, -0.925417, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.939693, -0.342020), glm::vec3(-0.000000, -0.939693, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.969846, -0.173648), glm::vec3(-0.171010, -0.969846, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.984808, -0.173648), glm::vec3(-0.000000, -0.984808, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.173648, -0.984808, 0.000000), glm::vec3(-0.173648, -0.984808, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -1.000000, 0.000000), glm::vec3(-0.000000, -1.000000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.171010, -0.969846, 0.173648), glm::vec3(-0.171010, -0.969846, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.984808, 0.173648), glm::vec3(-0.000000, -0.984808, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.163176, -0.925417, 0.342020), glm::vec3(-0.163176, -0.925417, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.939693, 0.342020), glm::vec3(-0.000000, -0.939693, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.150384, -0.852869, 0.500000), glm::vec3(-0.150384, -0.852869, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.866025, 0.500000), glm::vec3(-0.000000, -0.866025, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.133022, -0.754407, 0.642788), glm::vec3(-0.133022, -0.754407, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.766044, 0.642788), glm::vec3(-0.000000, -0.766044, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.111619, -0.633022, 0.766044), glm::vec3(-0.111619, -0.633022, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.642788, 0.766044), glm::vec3(-0.000000, -0.642788, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.086824, -0.492404, 0.866025), glm::vec3(-0.086824, -0.492404, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.500000, 0.866025), glm::vec3(-0.000000, -0.500000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.059391, -0.336824, 0.939693), glm::vec3(-0.059391, -0.336824, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.342020, 0.939693), glm::vec3(-0.000000, -0.342020, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.030154, -0.171010, 0.984808), glm::vec3(-0.030154, -0.171010, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.173648, 0.984808), glm::vec3(-0.000000, -0.173648, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.173648, 0.984808), glm::vec3(-0.000000, -0.173648, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.030154, -0.171010, 0.984808), glm::vec3(0.030154, -0.171010, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.342020, 0.939693), glm::vec3(-0.000000, -0.342020, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, -0.336824, 0.939693), glm::vec3(0.059391, -0.336824, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.500000, 0.866025), glm::vec3(-0.000000, -0.500000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, -0.492404, 0.866025), glm::vec3(0.086824, -0.492404, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.642788, 0.766044), glm::vec3(-0.000000, -0.642788, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, -0.633022, 0.766044), glm::vec3(0.111619, -0.633022, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.766044, 0.642788), glm::vec3(-0.000000, -0.766044, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, -0.754407, 0.642788), glm::vec3(0.133022, -0.754407, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.866025, 0.500000), glm::vec3(-0.000000, -0.866025, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, -0.852869, 0.500000), glm::vec3(0.150384, -0.852869, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.939693, 0.342020), glm::vec3(-0.000000, -0.939693, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, -0.925417, 0.342020), glm::vec3(0.163176, -0.925417, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.984808, 0.173648), glm::vec3(-0.000000, -0.984808, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.969846, 0.173648), glm::vec3(0.171010, -0.969846, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -1.000000, 0.000000), glm::vec3(-0.000000, -1.000000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.173648, -0.984808, 0.000000), glm::vec3(0.173648, -0.984808, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.984808, -0.173648), glm::vec3(-0.000000, -0.984808, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.969846, -0.173648), glm::vec3(0.171010, -0.969846, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.939693, -0.342020), glm::vec3(-0.000000, -0.939693, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, -0.925417, -0.342020), glm::vec3(0.163176, -0.925417, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.866025, -0.500000), glm::vec3(-0.000000, -0.866025, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, -0.852869, -0.500000), glm::vec3(0.150384, -0.852869, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.766044, -0.642788), glm::vec3(-0.000000, -0.766044, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, -0.754407, -0.642788), glm::vec3(0.133022, -0.754407, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.642788, -0.766044), glm::vec3(-0.000000, -0.642788, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, -0.633022, -0.766044), glm::vec3(0.111619, -0.633022, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.500000, -0.866025), glm::vec3(-0.000000, -0.500000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, -0.492404, -0.866025), glm::vec3(0.086824, -0.492404, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.342020, -0.939693), glm::vec3(-0.000000, -0.342020, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, -0.336824, -0.939693), glm::vec3(0.059391, -0.336824, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(-0.000000, -0.173648, -0.984808), glm::vec3(-0.000000, -0.173648, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.030154, -0.171010, -0.984808), glm::vec3(0.030154, -0.171010, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.030154, -0.171010, -0.984808), glm::vec3(0.030154, -0.171010, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, -0.163176, -0.984808), glm::vec3(0.059391, -0.163176, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, -0.336824, -0.939693), glm::vec3(0.059391, -0.336824, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.116978, -0.321394, -0.939693), glm::vec3(0.116978, -0.321394, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, -0.492404, -0.866025), glm::vec3(0.086824, -0.492404, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.469846, -0.866025), glm::vec3(0.171010, -0.469846, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, -0.633022, -0.766044), glm::vec3(0.111619, -0.633022, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, -0.604023, -0.766044), glm::vec3(0.219846, -0.604023, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, -0.754407, -0.642788), glm::vec3(0.133022, -0.754407, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, -0.719846, -0.642788), glm::vec3(0.262003, -0.719846, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, -0.852869, -0.500000), glm::vec3(0.150384, -0.852869, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, -0.813798, -0.500000), glm::vec3(0.296198, -0.813798, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, -0.925417, -0.342020), glm::vec3(0.163176, -0.925417, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.883022, -0.342020), glm::vec3(0.321394, -0.883022, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.969846, -0.173648), glm::vec3(0.171010, -0.969846, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, -0.925417, -0.173648), glm::vec3(0.336824, -0.925417, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.173648, -0.984808, 0.000000), glm::vec3(0.173648, -0.984808, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.342020, -0.939693, 0.000000), glm::vec3(0.342020, -0.939693, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.969846, 0.173648), glm::vec3(0.171010, -0.969846, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, -0.925417, 0.173648), glm::vec3(0.336824, -0.925417, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, -0.925417, 0.342020), glm::vec3(0.163176, -0.925417, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.883022, 0.342020), glm::vec3(0.321394, -0.883022, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, -0.852869, 0.500000), glm::vec3(0.150384, -0.852869, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, -0.813798, 0.500000), glm::vec3(0.296198, -0.813798, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, -0.754407, 0.642788), glm::vec3(0.133022, -0.754407, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, -0.719846, 0.642788), glm::vec3(0.262003, -0.719846, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, -0.633022, 0.766044), glm::vec3(0.111619, -0.633022, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, -0.604023, 0.766044), glm::vec3(0.219846, -0.604023, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, -0.492404, 0.866025), glm::vec3(0.086824, -0.492404, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.469846, 0.866025), glm::vec3(0.171010, -0.469846, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, -0.336824, 0.939693), glm::vec3(0.059391, -0.336824, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.116978, -0.321394, 0.939693), glm::vec3(0.116978, -0.321394, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.030154, -0.171010, 0.984808), glm::vec3(0.030154, -0.171010, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, -0.163176, 0.984808), glm::vec3(0.059391, -0.163176, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, -0.163176, 0.984808), glm::vec3(0.059391, -0.163176, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, -0.150384, 0.984808), glm::vec3(0.086824, -0.150384, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.116978, -0.321394, 0.939693), glm::vec3(0.116978, -0.321394, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.296198, 0.939693), glm::vec3(0.171010, -0.296198, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.469846, 0.866025), glm::vec3(0.171010, -0.469846, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.250000, -0.433013, 0.866025), glm::vec3(0.250000, -0.433013, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, -0.604023, 0.766044), glm::vec3(0.219846, -0.604023, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.556670, 0.766044), glm::vec3(0.321394, -0.556670, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, -0.719846, 0.642788), glm::vec3(0.262003, -0.719846, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, -0.663414, 0.642788), glm::vec3(0.383022, -0.663414, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, -0.813798, 0.500000), glm::vec3(0.296198, -0.813798, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, -0.750000, 0.500000), glm::vec3(0.433013, -0.750000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.883022, 0.342020), glm::vec3(0.321394, -0.883022, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, -0.813798, 0.342020), glm::vec3(0.469846, -0.813798, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, -0.925417, 0.173648), glm::vec3(0.336824, -0.925417, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.852869, 0.173648), glm::vec3(0.492404, -0.852869, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.342020, -0.939693, 0.000000), glm::vec3(0.342020, -0.939693, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.500000, -0.866025, 0.000000), glm::vec3(0.500000, -0.866025, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, -0.925417, -0.173648), glm::vec3(0.336824, -0.925417, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.852869, -0.173648), glm::vec3(0.492404, -0.852869, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.883022, -0.342020), glm::vec3(0.321394, -0.883022, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, -0.813798, -0.342020), glm::vec3(0.469846, -0.813798, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, -0.813798, -0.500000), glm::vec3(0.296198, -0.813798, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, -0.750000, -0.500000), glm::vec3(0.433013, -0.750000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, -0.719846, -0.642788), glm::vec3(0.262003, -0.719846, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, -0.663414, -0.642788), glm::vec3(0.383022, -0.663414, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, -0.604023, -0.766044), glm::vec3(0.219846, -0.604023, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.556670, -0.766044), glm::vec3(0.321394, -0.556670, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.469846, -0.866025), glm::vec3(0.171010, -0.469846, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.250000, -0.433013, -0.866025), glm::vec3(0.250000, -0.433013, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.116978, -0.321394, -0.939693), glm::vec3(0.116978, -0.321394, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.296198, -0.939693), glm::vec3(0.171010, -0.296198, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.059391, -0.163176, -0.984808), glm::vec3(0.059391, -0.163176, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, -0.150384, -0.984808), glm::vec3(0.086824, -0.150384, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, -0.150384, -0.984808), glm::vec3(0.086824, -0.150384, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, -0.133022, -0.984808), glm::vec3(0.111619, -0.133022, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.296198, -0.939693), glm::vec3(0.171010, -0.296198, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, -0.262003, -0.939693), glm::vec3(0.219846, -0.262003, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.250000, -0.433013, -0.866025), glm::vec3(0.250000, -0.433013, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.383022, -0.866025), glm::vec3(0.321394, -0.383022, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.556670, -0.766044), glm::vec3(0.321394, -0.556670, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.413176, -0.492404, -0.766044), glm::vec3(0.413176, -0.492404, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, -0.663414, -0.642788), glm::vec3(0.383022, -0.663414, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.586824, -0.642788), glm::vec3(0.492404, -0.586824, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, -0.750000, -0.500000), glm::vec3(0.433013, -0.750000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, -0.663414, -0.500000), glm::vec3(0.556670, -0.663414, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, -0.813798, -0.342020), glm::vec3(0.469846, -0.813798, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, -0.719846, -0.342020), glm::vec3(0.604023, -0.719846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.852869, -0.173648), glm::vec3(0.492404, -0.852869, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, -0.754407, -0.173648), glm::vec3(0.633022, -0.754407, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.500000, -0.866025, 0.000000), glm::vec3(0.500000, -0.866025, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.642788, -0.766044, 0.000000), glm::vec3(0.642788, -0.766044, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.852869, 0.173648), glm::vec3(0.492404, -0.852869, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, -0.754407, 0.173648), glm::vec3(0.633022, -0.754407, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, -0.813798, 0.342020), glm::vec3(0.469846, -0.813798, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, -0.719846, 0.342020), glm::vec3(0.604023, -0.719846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, -0.750000, 0.500000), glm::vec3(0.433013, -0.750000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, -0.663414, 0.500000), glm::vec3(0.556670, -0.663414, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, -0.663414, 0.642788), glm::vec3(0.383022, -0.663414, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.586824, 0.642788), glm::vec3(0.492404, -0.586824, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.556670, 0.766044), glm::vec3(0.321394, -0.556670, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.413176, -0.492404, 0.766044), glm::vec3(0.413176, -0.492404, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.250000, -0.433013, 0.866025), glm::vec3(0.250000, -0.433013, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.383022, 0.866025), glm::vec3(0.321394, -0.383022, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.296198, 0.939693), glm::vec3(0.171010, -0.296198, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, -0.262003, 0.939693), glm::vec3(0.219846, -0.262003, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.086824, -0.150384, 0.984808), glm::vec3(0.086824, -0.150384, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, -0.133022, 0.984808), glm::vec3(0.111619, -0.133022, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, -0.133022, 0.984808), glm::vec3(0.111619, -0.133022, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, -0.111619, 0.984808), glm::vec3(0.133022, -0.111619, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, -0.262003, 0.939693), glm::vec3(0.219846, -0.262003, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, -0.219846, 0.939693), glm::vec3(0.262003, -0.219846, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.383022, 0.866025), glm::vec3(0.321394, -0.383022, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, -0.321394, 0.866025), glm::vec3(0.383022, -0.321394, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.413176, -0.492404, 0.766044), glm::vec3(0.413176, -0.492404, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.413176, 0.766044), glm::vec3(0.492404, -0.413176, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.586824, 0.642788), glm::vec3(0.492404, -0.586824, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.586824, -0.492404, 0.642788), glm::vec3(0.586824, -0.492404, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, -0.663414, 0.500000), glm::vec3(0.556670, -0.663414, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, -0.556670, 0.500000), glm::vec3(0.663414, -0.556670, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, -0.719846, 0.342020), glm::vec3(0.604023, -0.719846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, -0.604023, 0.342020), glm::vec3(0.719846, -0.604023, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, -0.754407, 0.173648), glm::vec3(0.633022, -0.754407, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, -0.633022, 0.173648), glm::vec3(0.754407, -0.633022, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.642788, -0.766044, 0.000000), glm::vec3(0.642788, -0.766044, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.766044, -0.642788, 0.000000), glm::vec3(0.766044, -0.642788, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, -0.754407, -0.173648), glm::vec3(0.633022, -0.754407, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, -0.633022, -0.173648), glm::vec3(0.754407, -0.633022, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, -0.719846, -0.342020), glm::vec3(0.604023, -0.719846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, -0.604023, -0.342020), glm::vec3(0.719846, -0.604023, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, -0.663414, -0.500000), glm::vec3(0.556670, -0.663414, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, -0.556670, -0.500000), glm::vec3(0.663414, -0.556670, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.586824, -0.642788), glm::vec3(0.492404, -0.586824, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.586824, -0.492404, -0.642788), glm::vec3(0.586824, -0.492404, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.413176, -0.492404, -0.766044), glm::vec3(0.413176, -0.492404, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.413176, -0.766044), glm::vec3(0.492404, -0.413176, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.383022, -0.866025), glm::vec3(0.321394, -0.383022, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, -0.321394, -0.866025), glm::vec3(0.383022, -0.321394, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.219846, -0.262003, -0.939693), glm::vec3(0.219846, -0.262003, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, -0.219846, -0.939693), glm::vec3(0.262003, -0.219846, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.111619, -0.133022, -0.984808), glm::vec3(0.111619, -0.133022, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, -0.111619, -0.984808), glm::vec3(0.133022, -0.111619, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, -0.111619, -0.984808), glm::vec3(0.133022, -0.111619, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, -0.086824, -0.984808), glm::vec3(0.150384, -0.086824, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, -0.219846, -0.939693), glm::vec3(0.262003, -0.219846, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, -0.171010, -0.939693), glm::vec3(0.296198, -0.171010, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, -0.321394, -0.866025), glm::vec3(0.383022, -0.321394, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, -0.250000, -0.866025), glm::vec3(0.433013, -0.250000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.413176, -0.766044), glm::vec3(0.492404, -0.413176, -0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, -0.321394, -0.766044), glm::vec3(0.556670, -0.321394, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.586824, -0.492404, -0.642788), glm::vec3(0.586824, -0.492404, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, -0.383022, -0.642788), glm::vec3(0.663414, -0.383022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, -0.556670, -0.500000), glm::vec3(0.663414, -0.556670, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.750000, -0.433013, -0.500000), glm::vec3(0.750000, -0.433013, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, -0.604023, -0.342020), glm::vec3(0.719846, -0.604023, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, -0.469846, -0.342020), glm::vec3(0.813798, -0.469846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, -0.633022, -0.173648), glm::vec3(0.754407, -0.633022, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, -0.492404, -0.173648), glm::vec3(0.852869, -0.492404, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.766044, -0.642788, 0.000000), glm::vec3(0.766044, -0.642788, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.866025, -0.500000, 0.000000), glm::vec3(0.866025, -0.500000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, -0.633022, 0.173648), glm::vec3(0.754407, -0.633022, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, -0.492404, 0.173648), glm::vec3(0.852869, -0.492404, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, -0.604023, 0.342020), glm::vec3(0.719846, -0.604023, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, -0.469846, 0.342020), glm::vec3(0.813798, -0.469846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, -0.556670, 0.500000), glm::vec3(0.663414, -0.556670, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.750000, -0.433013, 0.500000), glm::vec3(0.750000, -0.433013, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.586824, -0.492404, 0.642788), glm::vec3(0.586824, -0.492404, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, -0.383022, 0.642788), glm::vec3(0.663414, -0.383022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.413176, 0.766044), glm::vec3(0.492404, -0.413176, 0.766045), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, -0.321394, 0.766044), glm::vec3(0.556670, -0.321394, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.383022, -0.321394, 0.866025), glm::vec3(0.383022, -0.321394, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, -0.250000, 0.866025), glm::vec3(0.433013, -0.250000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.262003, -0.219846, 0.939693), glm::vec3(0.262003, -0.219846, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, -0.171010, 0.939693), glm::vec3(0.296198, -0.171010, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.133022, -0.111619, 0.984808), glm::vec3(0.133022, -0.111619, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, -0.086824, 0.984808), glm::vec3(0.150384, -0.086824, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, -0.086824, 0.984808), glm::vec3(0.150384, -0.086824, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, -0.059391, 0.984808), glm::vec3(0.163176, -0.059391, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, -0.171010, 0.939693), glm::vec3(0.296198, -0.171010, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.116978, 0.939693), glm::vec3(0.321394, -0.116978, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, -0.250000, 0.866025), glm::vec3(0.433013, -0.250000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, -0.171010, 0.866025), glm::vec3(0.469846, -0.171010, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, -0.321394, 0.766044), glm::vec3(0.556670, -0.321394, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, -0.219846, 0.766044), glm::vec3(0.604023, -0.219846, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, -0.383022, 0.642788), glm::vec3(0.663414, -0.383022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, -0.262003, 0.642788), glm::vec3(0.719846, -0.262003, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.750000, -0.433013, 0.500000), glm::vec3(0.750000, -0.433013, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, -0.296198, 0.500000), glm::vec3(0.813798, -0.296198, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, -0.469846, 0.342020), glm::vec3(0.813798, -0.469846, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.883022, -0.321394, 0.342020), glm::vec3(0.883022, -0.321394, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, -0.492404, 0.173648), glm::vec3(0.852869, -0.492404, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, -0.336824, 0.173648), glm::vec3(0.925417, -0.336824, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.866025, -0.500000, 0.000000), glm::vec3(0.866025, -0.500000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.939693, -0.342020, 0.000000), glm::vec3(0.939693, -0.342020, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, -0.492404, -0.173648), glm::vec3(0.852869, -0.492404, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, -0.336824, -0.173648), glm::vec3(0.925417, -0.336824, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, -0.469846, -0.342020), glm::vec3(0.813798, -0.469846, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.883022, -0.321394, -0.342020), glm::vec3(0.883022, -0.321394, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.750000, -0.433013, -0.500000), glm::vec3(0.750000, -0.433013, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, -0.296198, -0.500000), glm::vec3(0.813798, -0.296198, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.663414, -0.383022, -0.642788), glm::vec3(0.663414, -0.383022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, -0.262003, -0.642788), glm::vec3(0.719846, -0.262003, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.556670, -0.321394, -0.766044), glm::vec3(0.556670, -0.321394, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, -0.219846, -0.766044), glm::vec3(0.604023, -0.219846, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.433013, -0.250000, -0.866025), glm::vec3(0.433013, -0.250000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, -0.171010, -0.866025), glm::vec3(0.469846, -0.171010, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.296198, -0.171010, -0.939693), glm::vec3(0.296198, -0.171010, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.116978, -0.939693), glm::vec3(0.321394, -0.116978, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.150384, -0.086824, -0.984808), glm::vec3(0.150384, -0.086824, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, -0.059391, -0.984808), glm::vec3(0.163176, -0.059391, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, -0.059391, -0.984808), glm::vec3(0.163176, -0.059391, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.030154, -0.984808), glm::vec3(0.171010, -0.030154, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.116978, -0.939693), glm::vec3(0.321394, -0.116978, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, -0.059391, -0.939693), glm::vec3(0.336824, -0.059391, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, -0.171010, -0.866025), glm::vec3(0.469846, -0.171010, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.086824, -0.866025), glm::vec3(0.492404, -0.086824, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, -0.219846, -0.766044), glm::vec3(0.604023, -0.219846, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, -0.111619, -0.766044), glm::vec3(0.633022, -0.111619, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, -0.262003, -0.642788), glm::vec3(0.719846, -0.262003, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, -0.133022, -0.642788), glm::vec3(0.754407, -0.133022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, -0.296198, -0.500000), glm::vec3(0.813798, -0.296198, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, -0.150384, -0.500000), glm::vec3(0.852869, -0.150384, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.883022, -0.321394, -0.342020), glm::vec3(0.883022, -0.321394, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, -0.163176, -0.342020), glm::vec3(0.925417, -0.163176, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, -0.336824, -0.173648), glm::vec3(0.925417, -0.336824, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.969846, -0.171010, -0.173648), glm::vec3(0.969846, -0.171010, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.939693, -0.342020, 0.000000), glm::vec3(0.939693, -0.342020, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.984808, -0.173648, 0.000000), glm::vec3(0.984808, -0.173648, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, -0.336824, 0.173648), glm::vec3(0.925417, -0.336824, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.969846, -0.171010, 0.173648), glm::vec3(0.969846, -0.171010, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.883022, -0.321394, 0.342020), glm::vec3(0.883022, -0.321394, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, -0.163176, 0.342020), glm::vec3(0.925417, -0.163176, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.813798, -0.296198, 0.500000), glm::vec3(0.813798, -0.296198, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, -0.150384, 0.500000), glm::vec3(0.852869, -0.150384, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.719846, -0.262003, 0.642788), glm::vec3(0.719846, -0.262003, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, -0.133022, 0.642788), glm::vec3(0.754407, -0.133022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.604023, -0.219846, 0.766044), glm::vec3(0.604023, -0.219846, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, -0.111619, 0.766044), glm::vec3(0.633022, -0.111619, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.469846, -0.171010, 0.866025), glm::vec3(0.469846, -0.171010, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.086824, 0.866025), glm::vec3(0.492404, -0.086824, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.321394, -0.116978, 0.939693), glm::vec3(0.321394, -0.116978, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, -0.059391, 0.939693), glm::vec3(0.336824, -0.059391, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.163176, -0.059391, 0.984808), glm::vec3(0.163176, -0.059391, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.030154, 0.984808), glm::vec3(0.171010, -0.030154, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(0.000000, 0.000000, 1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.030154, 0.984808), glm::vec3(0.171010, -0.030154, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.173648, -0.000000, 0.984808), glm::vec3(0.173648, -0.000000, 0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, -0.059391, 0.939693), glm::vec3(0.336824, -0.059391, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.342020, -0.000000, 0.939693), glm::vec3(0.342020, -0.000000, 0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.086824, 0.866025), glm::vec3(0.492404, -0.086824, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.500000, -0.000000, 0.866025), glm::vec3(0.500000, -0.000000, 0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, -0.111619, 0.766044), glm::vec3(0.633022, -0.111619, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.642788, -0.000000, 0.766044), glm::vec3(0.642788, -0.000000, 0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, -0.133022, 0.642788), glm::vec3(0.754407, -0.133022, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.766044, -0.000000, 0.642788), glm::vec3(0.766044, -0.000000, 0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, -0.150384, 0.500000), glm::vec3(0.852869, -0.150384, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.866025, -0.000000, 0.500000), glm::vec3(0.866025, -0.000000, 0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, -0.163176, 0.342020), glm::vec3(0.925417, -0.163176, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.939693, -0.000000, 0.342020), glm::vec3(0.939693, -0.000000, 0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.969846, -0.171010, 0.173648), glm::vec3(0.969846, -0.171010, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.984808, -0.000000, 0.173648), glm::vec3(0.984808, -0.000000, 0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.984808, -0.173648, 0.000000), glm::vec3(0.984808, -0.173648, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(1.000000, -0.000000, 0.000000), glm::vec3(1.000000, -0.000000, 0.000000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.969846, -0.171010, -0.173648), glm::vec3(0.969846, -0.171010, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.984808, -0.000000, -0.173648), glm::vec3(0.984808, -0.000000, -0.173648), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.925417, -0.163176, -0.342020), glm::vec3(0.925417, -0.163176, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.939693, -0.000000, -0.342020), glm::vec3(0.939693, -0.000000, -0.342020), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.852869, -0.150384, -0.500000), glm::vec3(0.852869, -0.150384, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.866025, -0.000000, -0.500000), glm::vec3(0.866025, -0.000000, -0.500000), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.754407, -0.133022, -0.642788), glm::vec3(0.754407, -0.133022, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.766044, -0.000000, -0.642788), glm::vec3(0.766044, -0.000000, -0.642788), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.633022, -0.111619, -0.766044), glm::vec3(0.633022, -0.111619, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.642788, -0.000000, -0.766044), glm::vec3(0.642788, -0.000000, -0.766044), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.492404, -0.086824, -0.866025), glm::vec3(0.492404, -0.086824, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.500000, -0.000000, -0.866025), glm::vec3(0.500000, -0.000000, -0.866025), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.336824, -0.059391, -0.939693), glm::vec3(0.336824, -0.059391, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.342020, -0.000000, -0.939693), glm::vec3(0.342020, -0.000000, -0.939693), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.171010, -0.030154, -0.984808), glm::vec3(0.171010, -0.030154, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.173648, -0.000000, -0.984808), glm::vec3(0.173648, -0.000000, -0.984808), glm::vec3(1.0f, 0.05f, 0.05f),
	glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(0.000000, 0.000000, -1.000000), glm::vec3(1.0f, 0.05f, 0.05f),
};

int createSphereVertexArrayObject() {
	// Create a vertex array
	GLuint vertexArrayObject;
	glGenVertexArrays(1, &vertexArrayObject);
	glBindVertexArray(vertexArrayObject);

	// Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
	GLuint vertexBufferObject;
	glGenBuffers(1, &vertexBufferObject);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertexArray), vertexArray, GL_STATIC_DRAW);

	glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
		3,                   // size
		GL_FLOAT,            // type
		GL_FALSE,            // normalized?
		3 * sizeof(glm::vec3), // stride - each vertex contain 3 vec3 (position, normal, color)
		(void*)0             // array buffer offset
	);
	glEnableVertexAttribArray(0);


	glVertexAttribPointer(1,                            // attribute 1 matches ? in Vertex Shader
		3,
		GL_FLOAT,
		GL_FALSE,
		3 * sizeof(glm::vec3),
		(void*)sizeof(glm::vec3)      // ? is offseted a vec3 (comes after position)
	);
	glEnableVertexAttribArray(1);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

	glVertexAttribPointer(2,                            // attribute 1 matches aColor in Vertex Shader
		3,
		GL_FLOAT,
		GL_FALSE,
		3 * sizeof(glm::vec3),
		(void*)sizeof(glm::vec3)      // color is offseted a vec3 (comes after normal)
	);
	glEnableVertexAttribArray(2);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

	return vertexArrayObject;
}
#pragma endregion

#pragma region lines
int createVertexArrayObjectCoordinateXYZ()
{
	// Cube model (position, colors)
	glm::vec3 vertexArray[] = {
		glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(1.0f, 0.0f, 0.0f), // middle, red
		glm::vec3(5.0f, 0.0f, 0.0f), glm::vec3(1.0f, 0.0f, 0.0f), // right, red
		glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f), // middle, green
		glm::vec3(0.0f, 5.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f), // up, green
		glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 0.0f, 1.0f), // middle, blue
		glm::vec3(0.0f, 0.0f, 5.0f), glm::vec3(0.0f, 0.0f, 1.0f) // near, blue
	};

	// Create a vertex array
	GLuint vertexArrayObject;
	glGenVertexArrays(1, &vertexArrayObject);
	glBindVertexArray(vertexArrayObject);


	// Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
	GLuint vertexBufferObject;
	glGenBuffers(1, &vertexBufferObject);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertexArray), vertexArray, GL_STATIC_DRAW);

	glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
		3,                   // size
		GL_FLOAT,            // type
		GL_FALSE,            // normalized?
		2 * sizeof(glm::vec3), // stride - each vertex contain 2 vec3 (position, color)
		(void*)0             // array buffer offset
	);
	glEnableVertexAttribArray(0);


	glVertexAttribPointer(1,                            // attribute 1 matches aColor in Vertex Shader
		3,
		GL_FLOAT,
		GL_FALSE,
		2 * sizeof(glm::vec3),
		(void*)sizeof(glm::vec3)      // color is offseted a vec3 (comes after position)
	);
	glEnableVertexAttribArray(1);


	return vertexBufferObject;
}

// Initialize variables for grid size
const int gridSize = 101; // Change only this value to change the grid size. If gridSize is 101 it Will make 100 x 100 squares in a grid
float halfGridSize = gridSize / 2.0f;
float lineLength = gridSize - 1.0f;
int createVertexArrayObjectGridLine()
{
	// Line Vertices Array containing position & colors 
	// One line is drawn by 4 vertices and it's doubled because we need lines in X and in Z therefore it's gridSize * 8
	glm::vec3 vertexArray[gridSize * 8];

	// For loops to add every vertex of position and color of X lines to the grid in the vertex array
	for (int i = 0; i < (gridSize * 8) / 2.0f; ++i)
	{
		if (i % 4 == 1 || i % 4 == 3) {
			vertexArray[i] = {
				glm::vec3(1.0f, 1.0f, 0.0f) // Color vertex (yellow)
			};
		}
		else if (i % 4 == 0) {
			vertexArray[i] = {
				glm::vec3(0.0f, 0.0f, 1.0f * i / 4.0f) // First vertex of position
			};
		}
		else {
			vertexArray[i] = {
				glm::vec3(1.0f * lineLength, 0.0f, 1.0f * ((i - 2) / 4.0f)) // Last vertex of position
			};
		}
	}

	// For loops to add every vertex of position and color of Z lines to the grid in the vertex array starting at index 400
	for (int i = 0; i < (gridSize * 8) / 2.0f; ++i)
	{
		if (i % 4 == 1 || i % 4 == 3) {
			vertexArray[i + (gridSize * 8) / 2] = {
				glm::vec3(1.0f, 1.0f, 0.0f) // Color vertex (yellow)
			};
		}
		else if (i % 4 == 0) {
			vertexArray[i + (gridSize * 8) / 2] = {
				glm::vec3(1.0f * i / 4, 0.0f, 0.0f) // First vertex of position
			};
		}
		else {
			vertexArray[i + (gridSize * 8) / 2] = {
				glm::vec3(1.0f * ((i - 2) / 4), 0.0f, 1.0f * lineLength) // Last vertex of position
			};
		}
	}

	// Create a vertex array
	GLuint vertexArrayObject;
	glGenVertexArrays(1, &vertexArrayObject);
	glBindVertexArray(vertexArrayObject);


	// Upload Vertex Buffer to the GPU, keep a reference to it (vertexBufferObject)
	GLuint vertexBufferObject;
	glGenBuffers(1, &vertexBufferObject);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBufferObject);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertexArray), vertexArray, GL_STATIC_DRAW);

	glVertexAttribPointer(0,                   // attribute 0 matches aPos in Vertex Shader
		3,                   // size
		GL_FLOAT,            // type
		GL_FALSE,            // normalized?
		2 * sizeof(glm::vec3), // stride - each vertex contain 2 vec3 (position, color)
		(void*)0             // array buffer offset
	);
	glEnableVertexAttribArray(0);


	glVertexAttribPointer(1,                            // attribute 1 matches aColor in Vertex Shader
		3,
		GL_FLOAT,
		GL_FALSE,
		2 * sizeof(glm::vec3),
		(void*)sizeof(glm::vec3)      // color is offseted a vec3 (comes after position)
	);
	glEnableVertexAttribArray(1);


	return vertexBufferObject;
}
#pragma endregion

#pragma region cameraInput
// Camera parameters
float cameraSpeed = 1.0f;
float cameraFastSpeed = 2 * cameraSpeed;
float cameraHorizontalAngle = 90.0f;
float cameraVerticalAngle = -25.0f;
const float cameraAngularSpeed = 60.0f;
float magnificationFactor = 0.25f;
bool cameraFirstPerson = true, panMoveMode = false, angleMoveMode = false, zoomMoveMode = false, fastCam = false;

void handleCameraFlagInputs(GLFWwindow* window) {
	if (glfwGetKey(window, GLFW_KEY_1) == GLFW_PRESS) // move camera down
	{
		cameraFirstPerson = true;
	}

	if (glfwGetKey(window, GLFW_KEY_2) == GLFW_PRESS) // move camera down
	{
		cameraFirstPerson = false;
	}

	fastCam = glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS || glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_PRESS;

	// On key up, set movement mode flag
	if (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_RIGHT) == GLFW_PRESS) {
		panMoveMode = true;
	}

	// On key down , unset movement mode flag
	if (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_RIGHT) == GLFW_RELEASE)
	{
		panMoveMode = false;
	}

	if (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_MIDDLE) == GLFW_PRESS)
	{
		angleMoveMode = true;
	}

	if (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_MIDDLE) == GLFW_RELEASE)
	{
		angleMoveMode = false;
	}

	if (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_LEFT) == GLFW_PRESS)
	{
		zoomMoveMode = true;
	}

	if (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_LEFT) == GLFW_RELEASE)
	{
		zoomMoveMode = false;
	}

}

// Camera parameters for view transform
glm::vec3 cameraPosition(0.0f, 15.0f, 30.0f);
int xShift = 12, zShift = 4;
vec3 presetCameraPositions[] = { glm::vec3(0.0f, 15.0f, 30.0f), glm::vec3(-xShift, 5.0f, -zShift),
glm::vec3(xShift, 5.0f, -zShift), glm::vec3(0.0f, 5.0f, 8.0f), glm::vec3(-xShift, 5.0f, 5 * zShift),
glm::vec3(xShift, 5.0f, 5 * zShift) };
int cameraPresetPosCount = 6;
int currentCamPresetPositionIndex = 0;

//Add a delay of 10 frames between camera angle changes, otherwise is can change every
//frame which is pretty chaotic and confusing
int changeDelay = 10;
void handleCameraPositionInputs(GLFWwindow* window) {
	if (changeDelay <= 0) {
		if (glfwGetKey(window, GLFW_KEY_PERIOD) == GLFW_PRESS)
		{
			currentCamPresetPositionIndex++;
			if (currentCamPresetPositionIndex >= cameraPresetPosCount) {
				currentCamPresetPositionIndex = 0;
			}
			cameraPosition = presetCameraPositions[currentCamPresetPositionIndex];
			changeDelay = 10;
			cameraHorizontalAngle = 90.0f;
			cameraVerticalAngle = -25.0f;
			magnificationFactor = 0.25f;
		}

		if (glfwGetKey(window, GLFW_KEY_COMMA) == GLFW_PRESS)
		{
			currentCamPresetPositionIndex--;
			if (currentCamPresetPositionIndex < 0) {
				currentCamPresetPositionIndex = cameraPresetPosCount - 1;
			}
			cameraPosition = presetCameraPositions[currentCamPresetPositionIndex];
			changeDelay = 10;
			cameraHorizontalAngle = 90.0f;
			cameraVerticalAngle = -25.0f;
			magnificationFactor = 0.25f;
		}
	}
	else {
		changeDelay--;
	}
}
#pragma endregion

#pragma region modelInput
//storing the redering mode in a variable 
int renderingMode = GL_TRIANGLE_STRIP;
void handleRenderingModeInput(GLFWwindow* window) {
	//----------------------------------------------------------------------------------
	//User can change the rendering mode
	if (glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS) //change to points
	{
		renderingMode = GL_POINTS;
	}

	if (glfwGetKey(window, GLFW_KEY_L) == GLFW_PRESS) //change to lines
	{
		renderingMode = GL_LINES;
	}

	if (glfwGetKey(window, GLFW_KEY_T) == GLFW_PRESS) //change to trianges
	{
		renderingMode = GL_TRIANGLE_STRIP;
	}
}

mat4 worldOrientationModelMatrix = mat4(1.0f);

// Control variables
float moveSpeed = 1.0f;
float scaleFactor = 1.0f;
float scaleSpeed = 0.25f;

// Model variables
float rotationSpeed = 90.0f;
float modelXRotationAngle = 0.0f;
float modelYRotationAngle = 0.0f;
float modelScaleFactor = 1.0f;
vec3 modelPosition = vec3(0.0f, 0.0f, 0.0f);

// Declaring model matrices
mat4 modelScalingMatrix = mat4(1.0f);
mat4 modelRotationMatrix;
mat4 modelTranslationMatrix;
mat4 sharedModelMatrix;
void handleWorldOrientationInput(GLFWwindow* window, float dt) {
	//Changing World Orientation 
	if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS) //rotate X axis in anti-clockwise direction
	{
		worldOrientationModelMatrix = worldOrientationModelMatrix * rotate(mat4(1.0f), radians(5.0f), vec3(-1.0f, 0.f, 0.f));
	}

	if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS) //rotate X axis in clockwise direction
	{
		worldOrientationModelMatrix = worldOrientationModelMatrix * rotate(mat4(1.0f), radians(5.0f), vec3(1.0f, 0.f, 0.f));
	}

	if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS) //rotate Y axis in anti-clockwise direction
	{
		worldOrientationModelMatrix = worldOrientationModelMatrix * rotate(mat4(1.0f), radians(5.0f), vec3(0.0f, -1.f, 0.f));
	}

	if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS) //rotate Y axis in clockwise direction
	{
		worldOrientationModelMatrix = worldOrientationModelMatrix * rotate(mat4(1.0f), radians(5.0f), vec3(0.0f, 1.0f, 0.f));
	}

	//reset world orientation to original settings
	//used Tab to test as I do not have a Home button
	if (glfwGetKey(window, GLFW_KEY_TAB) == GLFW_PRESS || glfwGetKey(window, GLFW_KEY_HOME) == GLFW_PRESS)
	{
		worldOrientationModelMatrix = mat4(1.0f);
		modelScaleFactor = 1.0f;
		modelPosition = vec3(0.0f);
		modelXRotationAngle = 0.0f;
		modelYRotationAngle = 0.0f;
	}

	// Role 4 input handling
	if (glfwGetKey(window, GLFW_KEY_U) == GLFW_PRESS)
	{
		// scale up
		modelScaleFactor += scaleSpeed * dt;
	}

	if (glfwGetKey(window, GLFW_KEY_J) == GLFW_PRESS)
	{
		// scale down
		modelScaleFactor -= scaleSpeed * dt;
	}

	if ((glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS || glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_PRESS)
		&& glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS) // move forwards
	{
		modelPosition += vec3(0.0f, 1.0f, 0.0f) * moveSpeed * dt;
	}

	if ((glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS || glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_PRESS)
		&& glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS) // move backwards
	{
		modelPosition += vec3(0.0f, -1.0f, 0.0f) * moveSpeed * dt;
	}

	if ((glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS || glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_PRESS)
		&& glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS) // move left 
	{
		modelPosition += vec3(-1.0f, 0.0f, 0.0f) * moveSpeed * dt;
	}

	if ((glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS || glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_PRESS)
		&& glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS) // move right 
	{
		modelPosition += vec3(1.0f, 0.0f, 0.0f) * moveSpeed * dt;
	}

	if ((glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_RELEASE && glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_RELEASE)
		&& glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
	{
		modelXRotationAngle -= rotationSpeed * dt;
	}

	if ((glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_RELEASE && glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_RELEASE)
		&& glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS) 
	{
		modelXRotationAngle += rotationSpeed * dt;
	}

	if ((glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_RELEASE && glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_RELEASE)
		&& glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
	{
		modelYRotationAngle += rotationSpeed * dt;
	}

	if ((glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_RELEASE && glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_RELEASE)
		&& glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
	{
		modelYRotationAngle -= rotationSpeed * dt;
	}
}
#pragma endregion

#pragma region alphabetStuff
// font taken from https://fontstruct.com/fontstructions/show/716744/3_by_5_pixel_font
// I'm really sorry this is all in one file. I am so freakin illiterate in C++, I have no clue what do.
// But basically, this maps a char to a string that represents a square pattern following the pixel font linked above
std::map<char, char*> alphabet = {
	{ 'A',
		"***"
		"* *"
		"***"
		"* *"
		"* *"
	},
	{ 'B',
		"** "
		"* *"
		"** "
		"* *"
		"** "
	},
	{ 'C',
		" **"
		"*  "
		"*  "
		"*  "
		" **"
	},
	{ 'D',
		"** "
		"* *"
		"* *"
		"* *"
		"** "
	},
	{ 'E',
		"***"
		"*  "
		"***"
		"*  "
		"***"
	},
	{ 'F',
		"***"
		"*  "
		"***"
		"*  "
		"*  "
	},
	{ 'G',
		" **"
		"*  "
		"* *"
		"* *"
		" **"
	},
	{ 'H',
		"* *"
		"* *"
		"***"
		"* *"
		"* *"
	},
	{ 'I',
		"***"
		" * "
		" * "
		" * "
		"***"
	},
	{ 'J',
		"  *"
		"  *"
		"  *"
		"* *"
		"***"
	},
	{ 'K',
		"* *"
		"* *"
		"** "
		"* *"
		"* *"
	},
	{ 'L',
		"*  "
		"*  "
		"*  "
		"*  "
		"***"
	},
	{ 'M',
		"* *"
		"***"
		"* *"
		"* *"
		"* *"
	},
	{ 'N',
		"***"
		"* *"
		"* *"
		"* *"
		"* *"
	},
	{ 'O',
		"***"
		"* *"
		"* *"
		"* *"
		"***"
	},
	{ 'P',
		"***"
		"* *"
		"***"
		"*  "
		"*  "
	},
	{ 'Q',
		"** "
		"** "
		"** "
		"** "
		"***"
	},
	{ 'R',
		"** "
		"* *"
		"** "
		"* *"
		"* *"
	},
	{ 'S',
		" **"
		"*  "
		" * "
		"  *"
		"** "
	},
	{ 'T',
		"***"
		" * "
		" * "
		" * "
		" * "
	},
	{ 'U',
		"* *"
		"* *"
		"* *"
		"* *"
		"***"
	},
	{ 'V',
		"* *"
		"* *"
		"* *"
		"* *"
		"** "
	},
	{ 'W',
		"* *"
		"* *"
		"* *"
		"***"
		"* *"
	},
	{ 'X',
		"* *"
		"* *"
		" * "
		"* *"
		"* *"
	},
	{ 'Y',
		"* *"
		"* *"
		"***"
		" * "
		" * "
	},
	{ 'Z',
		"***"
		"  *"
		" * "
		"*  "
		"***"
	},
	{ '0',
		" * "
		"* *"
		"* *"
		"* *"
		" * "
	},
	{ '1',
		" * "
		"** "
		" * "
		" * "
		"***"
	},
	{ '2',
		"** "
		"  *"
		" * "
		"*  "
		"***"
	},
	{ '3',
		"***"
		"  *"
		" **"
		"  *"
		"***"
	},
	{ '4',
		"* *"
		"* *"
		"***"
		"  *"
		"  *"
	},
	{ '5',
		"***"
		"*  "
		"***"
		"  *"
		"** "
	},
	{ '6',
		" **"
		"*  "
		"***"
		"* *"
		"***"
	},
	{ '7',
		"***"
		"  *"
		" * "
		"*  "
		"*  "
	},
	{ '8',
		"***"
		"* *"
		"***"
		"* *"
		"***"
	},
	{ '9',
		"***"
		"* *"
		"***"
		"  *"
		"** "
	}
};

/*
 * This is the main rendering function.
 * It picks a letter from the alphabet and draws it according to the
 * modelMatrix transform
 */

int numVerticesPerCube = 36;

Model* drawLetter(char c, int index, int vao, glm::mat4 setUpScaling, glm::mat4 setUpRotation,glm:: mat4 setUpTranslation)
{
	char* letter = alphabet[c];

	// Setting up the model
	vector<Model*> modelChildren = vector<Model*>();

	for (int i = 0; i < 15; i++)
	{
		if (letter[i] == '*')
		{
			// Creating part of the model
			setUpTranslation = translate(mat4(1.0f), vec3(-3.5f + (index * 4.0f) + (i % 3)*1.0f, 1.5 + (ceil(i / 3)*-1.0f), -0.5f));
			Model* modelPart = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), mat4(1.0));

			// Setting up the model
			modelChildren.push_back(modelPart);
		}
	}
	//The pieces of part of a model (letter or number) are placed such that the entire model (letter or number) 
	//is centered at origin on all axes
	//We can then very simply manipulate this model to transform the entire model (letter or number)
	//for example, to scoot the letter left to make room for the number, making the entire model centered.
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-2.0f, 0.0f, 0.0f));
	Model* model = new Model(vao, 0, modelChildren, setUpTranslation, mat4(1.0f), mat4(1.0f));

	return model;
}
#pragma endregion

Model* makeL9Model(int vao, int sphereVAO) {
	/*  This is the hierarchy for L9, built with Model objects holding other Model objects:

                                      modelL9

                            /                           \

                modelL                                         model9

            /            \                       /           /           \          \

     modelLbottomBar modelLverticalBar      model9top  model9right   model9left  model9bottom

	Each model applies its own TRS transformations to its children recursively, achieving the same affect
	we used to get by multiplying out each matrix many times over, like so:
			glm::mat4 Lpart = scale(glm::mat4(1.0f), glm::vec3(1.0f, 5.0f, 1.0f));
			glm::mat4 modelLbottomBar = L9Matrix * LMatrix * Lpart;
	The recursive calls in draw() now do the above matrix multiplication without us having to specify them for each piece.
	*/


	// Draw L9 using hierarchical modeling, start at the lowest model(s) in the hierarchy
	glm::mat4 setUpScaling = mat4(1.0f);
	glm::mat4 setUpRotation = mat4(1.0f);
	glm::mat4 setUpTranslation = mat4(1.0f);


	// Creating left-part of the letter L
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-1.0f, 0.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 5.0f, 1.0f));
	Model* modelLbottomBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);


	// Creating right-part of the letter L
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(2.0f, 1.0f, 1.0f));
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(0.5f, -2.0f, 0.0f));
	Model* modelLverticalBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Setting up the letter L
	vector<Model*> LChildren = vector<Model*>();
	LChildren.push_back(modelLbottomBar);
	LChildren.push_back(modelLverticalBar);
	//The pieces of the L are placed such that the entire L is centered at origin on all axes
	//We can then very simply manipulate this modelL to transform the entire L
	//for example, to scoot the L left to make room for the number, making the entire L9 centered.
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-2.0f, 0.0f, 0.0f));
	Model* modelL = new Model(vao, 0, LChildren, setUpTranslation, mat4(1.0f), mat4(1.0f));


	// Creating top-part of the number 9
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(0.0f, 2.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(2.0f, 1.0f, 1.0f));
	Model* model9top = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating right-part of the number 9
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(1.5f, 0.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 5.0f, 1.0f));
	Model* model9right = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating left-part of the number 9
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-0.5f, 0.5f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 2.0f, 1.0f));
	Model* model9left = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating bottom-part of the number 9
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(0.5f, 0.0f, 0.0f));
	Model* model9bottom = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), mat4(1.0f));

	// Setting up the number 9
	vector<Model*> nineChildren = vector<Model*>();
	nineChildren.push_back(model9top);
	nineChildren.push_back(model9right);
	nineChildren.push_back(model9left);
	nineChildren.push_back(model9bottom);
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(1.5f, 0.0f, 0.0f));
	Model* model9 = new Model(vao, 0, nineChildren, setUpTranslation, mat4(1.0f), mat4(1.0f));


	// Setting up the entire L9
	// This will be the root, and will be provided with the current world and sharedModel matrices in draw() from main()
	vector<Model*> L9Children = vector<Model*>();
	L9Children.push_back(modelL);
	L9Children.push_back(model9);
	Model* modelL9 = new Model(vao, 0, L9Children, mat4(1.0f), mat4(1.0f), mat4(1.0f));

	// Setting up Sphere
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(0.0f, 4.5f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(6.0f, 6.0f, 6.0f));
	Model* modelSphere = new Model(sphereVAO, sizeof(vertexArray) / sizeof(36), vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Setting up the entire model
	// This will be the root, and will be provided with the current world and sharedModel matrices in draw() from main()
	vector<Model*> entireModelChildren = vector<Model*>();
	entireModelChildren.push_back(modelL9);
	entireModelChildren.push_back(modelSphere);
	Model* entireModel = new Model(vao, 0, entireModelChildren, mat4(1.0f), mat4(1.0f), mat4(1.0f));

	return entireModel;
}

Model* makeI9Model(int vao, int sphereVAO) {
	// Draw I9 using hierarchical modeling, start at the lowest model(s) in the hierarchy
	glm::mat4 setUpScaling = mat4(1.0f);
	glm::mat4 setUpRotation = mat4(1.0f);
	glm::mat4 setUpTranslation = mat4(1.0f);

	// Creating top-part of the letter I
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-3.0f, 4.5f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(4.0f, 1.0f, 1.0f));
	Model* modelItopBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);


	// Creating middlet-part of the letter I
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 3.0f, 1.0f));
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-3.0f, 2.5f, 0.0f));
	Model* modelImiddleBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating bottom-part of the letter I
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(4.0f, 1.0f, 1.0f));
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-3.0f, 0.5f, 0.0f));
	Model* modelIbottomBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Setting up the letter I
	vector<Model*> IChildren = vector<Model*>();
	IChildren.push_back(modelItopBar);
	IChildren.push_back(modelImiddleBar);
	IChildren.push_back(modelIbottomBar);
	//The pieces of the I are placed such that the entire I is centered at origin on all axes
	//We can then very simply manipulate this modelI to transform the entire I
	//for example, to scoot the I left to make room for the number, making the entire I9 centered.
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-2.0f, -2.0f, 0.0f));
	Model* modelI = new Model(vao, 0, IChildren, setUpTranslation, mat4(1.0f), mat4(1.0f));


	// Creating top-part of the number 9
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(2.75f, 4.5f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.5f, 1.0f, 1.0f));
	Model* model9top = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating left-part of the number 9
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(1.5f, 3.25f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 3.5f, 1.0f));
	Model* model9left = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating bottom-part of the number 9
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(2.75f, 2.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(2.0f, 1.0f, 1.0f));
	Model* model9bottom = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating right-part of the number 9
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(4.0f, 2.51f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 5.0f, 1.0f));
	Model* model9right = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);


	// Setting up the number 9
	vector<Model*> nineChildren = vector<Model*>();
	nineChildren.push_back(model9top);
	nineChildren.push_back(model9right);
	nineChildren.push_back(model9left);
	nineChildren.push_back(model9bottom);
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-2.0f, -2.0f, 0.0f));
	Model* model9 = new Model(vao, 0, nineChildren, setUpTranslation, mat4(1.0f), mat4(1.0f));


	// Setting up the entire I9
	// This will be the root, and will be provided with the current world and sharedModel matrices in draw() from main()
	vector<Model*> I9Children = vector<Model*>();
	I9Children.push_back(modelI);
	I9Children.push_back(model9);
	Model* modelI9 = new Model(vao, 0, I9Children, mat4(1.0f), mat4(1.0f), mat4(1.0f));

	// Setting up Sphere
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-2.0f, 5.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(6.0f, 6.0f, 6.0f));
	Model* modelSphere = new Model(sphereVAO, sizeof(vertexArray) / sizeof(36), vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Setting up the entire model
	// This will be the root, and will be provided with the current world and sharedModel matrices in draw() from main()
	vector<Model*> entireModelChildren = vector<Model*>();
	entireModelChildren.push_back(modelI9);
	entireModelChildren.push_back(modelSphere);
	Model* entireModel = new Model(vao, 0, entireModelChildren, mat4(1.0f), mat4(1.0f), mat4(1.0f));

	return entireModel;}

Model* makeU3Model(int vao, int sphereVAO) {
	// Draw U3 using hierarchical modeling, start at the lowest model(s) in the hierarchy
	glm::mat4 setUpScaling = mat4(1.0f);
	glm::mat4 setUpRotation = mat4(1.0f);
	glm::mat4 setUpTranslation = mat4(1.0f);

	// Creating left-part of the letter U
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-3.0f, 0.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 5.0f, 1.0f));
	Model* modelUleftBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);


	// Creating bottom-part of the letter U
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(2.0f, 1.0f, 1.0f));
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-1.5f, -2.0f, 0.0f));
	Model* modelUbottomBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating right-part of the letter U
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 5.0f, 1.0f));
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f));
	Model* modelUrightBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Setting up the letter U
	vector<Model*> UChildren = vector<Model*>();
	UChildren.push_back(modelUleftBar);
	UChildren.push_back(modelUbottomBar);
	UChildren.push_back(modelUrightBar);
	//The pieces of the U are placed such that the entire U is centered at origin on all axes
	//We can then very simply manipulate this modelU to transform the entire U
	//for example, to scoot the U left to make room for the number, making the entire U3 centered.
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-2.0f, 0.0f, 0.0f));
	Model* modelU = new Model(vao, 0, UChildren, setUpTranslation, mat4(1.0f), mat4(1.0f));


	// Creating base-part of the number 3
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(4.0f, 0.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 5.0f, 1.0f));
	Model* model3base = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating topArm-part of the number 3
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(2.5f, 2.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(2.0f, 1.0f, 1.0f));
	Model* model3topArm = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating middleArm-part of the number 3
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(2.5f, -2.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(2.0f, 1.0f, 1.0f));
	Model* model3middleArm = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating bottomArm-part of the number 3
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(3.0f, 0.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 1.0f, 1.0f));
	Model* model3bottomArm = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);


	// Setting up the number 3
	vector<Model*> threeChildren = vector<Model*>();
	threeChildren.push_back(model3base);
	threeChildren.push_back(model3topArm);
	threeChildren.push_back(model3middleArm);
	threeChildren.push_back(model3bottomArm);
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f));
	Model* model3 = new Model(vao, 0, threeChildren, setUpTranslation, mat4(1.0f), mat4(1.0f));


	// Setting up the entire U3
	// This will be the root, and will be provided with the current world and sharedModel matrices in draw() from main()
	vector<Model*> U3Children = vector<Model*>();
	U3Children.push_back(modelU);
	U3Children.push_back(model3);
	Model* modelU3 = new Model(vao, 0, U3Children, mat4(1.0f), mat4(1.0f), mat4(1.0f));

	// Setting up Sphere
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(0.0f, 4.5f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(6.0f, 6.0f, 6.0f));
	Model* modelSphere = new Model(sphereVAO, sizeof(vertexArray) / sizeof(36), vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Setting up the entire model
	// This will be the root, and will be provided with the current world and sharedModel matrices in draw() from main()
	vector<Model*> entireModelChildren = vector<Model*>();
	entireModelChildren.push_back(modelU3);
	entireModelChildren.push_back(modelSphere);
	Model* entireModel = new Model(vao, 0, entireModelChildren, mat4(1.0f), mat4(1.0f), mat4(1.0f));

	return entireModel;}

Model* makeT9Model(int vao, int sphereVAO) {
	// Draw using hierarchical modeling, start at the lowest model(s) in the hierarchy
	glm::mat4 setUpScaling = mat4(1.0f);
	glm::mat4 setUpRotation = mat4(1.0f);
	glm::mat4 setUpTranslation = mat4(1.0f);
	
	Model* modelT = drawLetter('T', 0, vao, setUpScaling, setUpRotation, setUpTranslation);
	Model* model9 = drawLetter('9', 1, vao, setUpScaling, setUpRotation, setUpTranslation);

	// Setting up the entireT9
	// This will be the root, and will be provided with the current world and sharedModel matrices in draw() from main()
	vector<Model*> T9Children = vector<Model*>();
	T9Children.push_back(modelT);
	T9Children.push_back(model9);
	Model* modelT9 = new Model(vao, 0, T9Children, mat4(1.0f), mat4(1.0f), mat4(1.0f));

	// Setting up Sphere
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-1.5f, 5.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(6.0f, 6.0f, 6.0f));
	Model* modelSphere = new Model(sphereVAO, sizeof(vertexArray) / sizeof(36), vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Setting up the entire model
	// This will be the root, and will be provided with the current world and sharedModel matrices in draw() from main()
	vector<Model*> entireModelChildren = vector<Model*>();
	entireModelChildren.push_back(modelT9);
	entireModelChildren.push_back(modelSphere);
	Model* entireModel = new Model(vao, 0, entireModelChildren, mat4(1.0f), mat4(1.0f), mat4(1.0f));

	return entireModel;}

Model* makeC4Model(int vao, int sphereVAO) {
	// Draw C4 using hierarchical modeling, start at the lowest model(s) in the hierarchy
	glm::mat4 setUpScaling = mat4(1.0f);
	glm::mat4 setUpRotation = mat4(1.0f);
	glm::mat4 setUpTranslation = mat4(1.0f);

	// Creating left-part of the letter C
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 5.0f, 1.0f));
	Model* modelCleftBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating bottom-part of the letter C
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(3.0f, 1.0f, 1.0f));
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(1.0f, 0.0f, 0.0f));
	Model* modelCbottomBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating top-part of the letter C
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(3.0f, 1.0f, 1.0f));
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(1.0f, 4.0f, 0.0f));
	Model* modelCtopBar = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Setting up the letter C
	vector<Model*> CChildren = vector<Model*>();
	CChildren.push_back(modelCleftBar);
	CChildren.push_back(modelCbottomBar);
	CChildren.push_back(modelCtopBar);
	//The pieces of the C are placed such that the entire C is centered at origin on all axes
	//We can then very simply manipulate this modelC to transform the entire C
	//for example, to scoot the C left to make room for the number, making the entire C4 centered.
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-9.0f, 0.0f, 0.0f));
	Model* modelC = new Model(vao, 0, CChildren, setUpTranslation, mat4(1.0f), mat4(1.0f));

	
	// Creating right-part of the number 4
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 5.0f, 1.0f));
	Model* model4right = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating middle-part of the number 4
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-3.0f, 2.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(3.0f, 1.0f, 1.0f));
	Model* model4middle = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Creating left-part of the number 4
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-3.0f, 3.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(1.0f, 2.0f, 1.0f));
	Model* model4left = new Model(vao, numVerticesPerCube, vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Setting up the number 4
	vector<Model*> fourChildren = vector<Model*>();
	fourChildren.push_back(model4left);
	fourChildren.push_back(model4middle);
	fourChildren.push_back(model4right);
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f));
	Model* model4 = new Model(vao, 0, fourChildren, setUpTranslation, mat4(1.0f), mat4(1.0f));


	// Setting up the entire C4
	// This will be the root, and will be provided with the current world and sharedModel matrices in draw() from main()
	vector<Model*> C4Children = vector<Model*>();
	C4Children.push_back(modelC);
	C4Children.push_back(model4);
	Model* modelC4 = new Model(vao, 0, C4Children, mat4(1.0f), mat4(1.0f), mat4(1.0f));

	// Setting up Sphere
	setUpTranslation = translate(glm::mat4(1.0f), glm::vec3(-4.0f, 7.0f, 0.0f));
	setUpScaling = scale(glm::mat4(1.0f), glm::vec3(6.0f, 6.0f, 6.0f));
	Model* modelSphere = new Model(sphereVAO, sizeof(vertexArray) / sizeof(36), vector<Model*>(), setUpTranslation, mat4(1.0f), setUpScaling);

	// Setting up the entire model
	// This will be the root, and will be provided with the current world and sharedModel matrices in draw() from main()
	vector<Model*> entireModelChildren = vector<Model*>();
	entireModelChildren.push_back(modelC4);
	entireModelChildren.push_back(modelSphere);
	Model* entireModel = new Model(vao, 0, entireModelChildren, mat4(1.0f), mat4(1.0f), mat4(1.0f));

	return entireModel;}


void handleExitInput(GLFWwindow* window) {
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
}

void checkErrors() {
	int errorValue = glGetError();
	if (errorValue != 0) {
		std::cout << "error of some sort: " << errorValue << std::endl;
	}
}

int main(int argc, char*argv[])
{
	checkErrors();

#pragma region windowSetUp
	// Initialize GLFW and OpenGL version
	glfwInit();

#if defined(PLATFORM_OSX)
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#else
	// On windows, we set OpenGL version to 2.1, to support more hardware
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);
#endif

	// Create Window and rendering context using GLFW, resolution is 800x600
	GLFWwindow* window = glfwCreateWindow(1024, 764, "Comp371 - Group 14 P1", NULL, NULL);
	if (window == NULL)
	{
		std::cerr << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);

	// Initialize GLEW
	glewExperimental = true; // Needed for core profile
	if (glewInit() != GLEW_OK) {
		std::cerr << "Failed to create GLEW" << std::endl;
		glfwTerminate();
		return -1;
	}

	// Black background
	glClearColor(0.0f, 0.0f, 25 / 225.0f, 1.0f);

	// Compile and link shaders here ...
	GLuint shaderProgram = shader("../Source/COMP371-Group14-Project/modelShader.vs", "../Source/COMP371-Group14-Project/modelShader.fs");

	// We can set the shader once, since we have only one
	glUseProgram(shaderProgram);
#pragma endregion windowSetUp

	// Camera parameters for view transform
	glm::vec3 cameraLookAt(0.0f, 0.0f, 0.0f);
	glm::vec3 cameraUp(0.0f, 1.0f, 0.0f);

	// Set projection matrix for shader, this won't change
	glm::mat4 projectionMatrix = glm::perspective(70.0f, // field of view in degrees
		1024.0f / 768.0f,  // aspect ratio
		0.01f, 100.0f);   // near and far (near > 0)

	GLuint projectionMatrixLocation = glGetUniformLocation(shaderProgram, "projectionMatrix");
	glUniformMatrix4fv(projectionMatrixLocation, 1, GL_FALSE, &projectionMatrix[0][0]);

	// Set initial view matrix
	glm::mat4 viewMatrix = lookAt(cameraPosition,  // eye
		cameraPosition + cameraLookAt,  // center
		cameraUp); // up

	GLuint viewMatrixLocation = glGetUniformLocation(shaderProgram, "viewMatrix");
	glUniformMatrix4fv(viewMatrixLocation, 1, GL_FALSE, &viewMatrix[0][0]);

	// Define and upload geometry to the GPU here ...
	//We have a few different cubes since some people did fun colors,
	//And some are centered on origin while others have origin in a corner
	int unitCubeVAO = createUnitCubeVertexArrayObject();
	int rainbowCubeVAO = createVertexArrayObjectU3();
	int vao = createVertexArrayObjectR4();
	int gridVAO = createVertexArrayObjectGridLine();
	int xyzVAO = createVertexArrayObjectCoordinateXYZ();
	int sphereVAO = createSphereVertexArrayObject();


	//Create hierarchical models
	mat4 L9BaseTranslation = translate(glm::mat4(1.0f), glm::vec3(-halfGridSize, 2.5f, -halfGridSize));	//Model's start pos doesn't change
	Model* l9Model = makeL9Model(unitCubeVAO, sphereVAO);
	
	mat4 I9BaseTranslation = translate(glm::mat4(1.0f), glm::vec3(halfGridSize -1, 2.5f, -halfGridSize));	//Model's start pos doesn't change
	Model* i9Model = makeI9Model(unitCubeVAO, sphereVAO);

	mat4 U3BaseTranslation = translate(glm::mat4(1.0f), glm::vec3(0, 2.5f, 0));	//Model's start pos doesn't change
	Model* u3Model = makeU3Model(rainbowCubeVAO, sphereVAO);

	mat4 T9BaseTranslation = translate(glm::mat4(1.0f), glm::vec3(-halfGridSize, 2.5f, halfGridSize));	//Model's start pos doesn't change
	Model* t9Model = makeT9Model(vao, sphereVAO);

	mat4 C4BaseTranslation = translate(glm::mat4(1.0f), glm::vec3(halfGridSize - 1, 2.5f, halfGridSize));	//Model's start pos doesn't change
	Model* c4Model = makeC4Model(vao, sphereVAO);

	// For frame time
	float lastFrameTime = glfwGetTime();
	int lastMouseLeftState = GLFW_RELEASE;
	double lastMousePosX, lastMousePosY;
	glfwGetCursorPos(window, &lastMousePosX, &lastMousePosY);

	// Enable Backface culling and depth test
	glEnable(GL_CULL_FACE);
	glEnable(GL_DEPTH_TEST);

	glPointSize(3.0f);

	// Entering Main Loop
	while (!glfwWindowShouldClose(window))
	{
		// Frame time calculation
		float dt = glfwGetTime() - lastFrameTime;
		lastFrameTime += dt;

		// Each frame, reset color of each pixel to glClearColor
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		GLuint worldMatrixLocation = glGetUniformLocation(shaderProgram, "worldMatrix");

		// Model Matrices - they control the transformations of the letters model
		modelScalingMatrix = scale(mat4(1.0f), vec3(1.0f, 1.0f, 1.0f) * modelScaleFactor);
		modelRotationMatrix = rotate(mat4(1.0f), radians(modelYRotationAngle), vec3(0.0f, 1.0f, 0.0f)) * rotate(mat4(1.0f), radians(modelXRotationAngle), vec3(1.0f, 0.0f, 0.0f));
		modelTranslationMatrix = translate(mat4(1.0f), modelPosition);
		sharedModelMatrix = modelTranslationMatrix * modelScalingMatrix * modelRotationMatrix;

#pragma region Grid and Coordinate Axis
		// Draw ground using Hierarchical Modeling
		glBindVertexArray(gridVAO);

		// Initialize variables for grid size
		glm::mat4 GridX = worldOrientationModelMatrix * translate(mat4(1.0f), vec3(-1.0f * gridSize / 2.0f, 0.0f, -1.0f * gridSize / 2.0f));
		glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &GridX[0][0]);
		glDrawArrays(GL_LINES, 0, 2 * (gridSize * 2));


		// Set up Coordinate Axis Matrix using Hierarchical Modeling
		glm::mat4 Coordinates = worldOrientationModelMatrix * translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.01f, 0.01f));

		int numLines = 3;
		glBindVertexArray(xyzVAO);

		glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &Coordinates[0][0]);
		glLineWidth(5.0f);
		glDrawArrays(GL_LINES, 0, 2 * numLines);
#pragma endregion

		glLineWidth(1.0f);

		//Draw L9
		mat4 L9Matrix = worldOrientationModelMatrix * L9BaseTranslation * sharedModelMatrix;
		l9Model->draw(L9Matrix, renderingMode, worldMatrixLocation);
		
		//Draw I9
		mat4 I9Matrix = worldOrientationModelMatrix * I9BaseTranslation * sharedModelMatrix;
		i9Model->draw(I9Matrix, renderingMode, worldMatrixLocation);

		//Draw U3
		mat4 U3Matrix = worldOrientationModelMatrix * U3BaseTranslation * sharedModelMatrix;
		u3Model->draw(U3Matrix, renderingMode, worldMatrixLocation);

		//Draw T9
		mat4 T9Matrix = worldOrientationModelMatrix * T9BaseTranslation * sharedModelMatrix;
		t9Model->draw(T9Matrix, renderingMode, worldMatrixLocation);

		//Draw C4
		mat4 C4Matrix = worldOrientationModelMatrix * C4BaseTranslation * sharedModelMatrix;
		c4Model->draw(C4Matrix, renderingMode, worldMatrixLocation);


		// End Frame, include swap interval to prevent blurriness
		glfwSwapBuffers(window);
		glfwSwapInterval(1);
		glfwPollEvents();

		// Handle inputs
		handleCameraFlagInputs(window);
		handleRenderingModeInput(window);
		handleWorldOrientationInput(window, dt);
		handleExitInput(window);
		handleCameraPositionInputs(window);


		float currentCameraSpeed = (fastCam) ? cameraFastSpeed : cameraSpeed;

		// Retrieving mouse coordinates
		double mousePosX, mousePosY;
		glfwGetCursorPos(window, &mousePosX, &mousePosY);

		// Calculating directional movement
		double dx = mousePosX - lastMousePosX;
		double dy = mousePosY - lastMousePosY;

		// Update last position coordinates
		lastMousePosX = mousePosX;
		lastMousePosY = mousePosY;

		cameraVerticalAngle = std::max(-85.0f, std::min(85.0f, cameraVerticalAngle));
		if (cameraHorizontalAngle > 360)
		{
			cameraHorizontalAngle -= 360;
		}
		else if (cameraHorizontalAngle < -360)
		{
			cameraHorizontalAngle += 360;
		}

		float theta = glm::radians(cameraHorizontalAngle);
		float phi = glm::radians(cameraVerticalAngle);

		cameraLookAt = glm::vec3(cosf(phi) * cosf(theta), sinf(phi), -cosf(phi) * sinf(theta));
		glm::vec3 cameraSideVector = glm::cross(cameraLookAt, glm::vec3(0.0f, 1.0f, 0.0f));

		glm::normalize(cameraSideVector);

#pragma region mouseCameraMovement
		/* Begin Part 2 - SIMULTANEOUS MOUSE AND KEY movement */
		if (panMoveMode)
		{
			if (dx > 0) {
				cameraHorizontalAngle -= cameraAngularSpeed * dt * 1 * dx;
			}
			// If position goes toward negative axis, increase cameraposition
			else if (dx < 0) {
				cameraHorizontalAngle += cameraAngularSpeed * dt * -1 * dx;
			}
		}

		if (angleMoveMode)
		{
			if (dy < 0) {
				cameraVerticalAngle += cameraAngularSpeed * dt * -1 * dy;
			}

			else if (dy > 0) {
				cameraVerticalAngle -= cameraAngularSpeed * dt * dy;
			}
		}

		if (zoomMoveMode)
		{
			if (dy > 0) { //INCR
				magnificationFactor = magnificationFactor * 1.5f;
			}

			else if (dy < 0) { // DECR
				magnificationFactor = magnificationFactor / 1.5f;
			}
		}

		glUniformMatrix4fv(projectionMatrixLocation, 1, GL_FALSE, &projectionMatrix[0][0]);

		// Update viewMatrix
		viewMatrix = lookAt(cameraPosition, cameraPosition + cameraLookAt, cameraUp);
		viewMatrix = glm::scale(viewMatrix, vec3(magnificationFactor, magnificationFactor, magnificationFactor));

		glUniformMatrix4fv(viewMatrixLocation, 1, GL_FALSE, &viewMatrix[0][0]);

		/* END Part 2 - SIMULTANEOUS MOUSE AND KEY movement */
#pragma endregion

	}

	// Shutdown GLFW
	glfwTerminate();

	return 0;
}

