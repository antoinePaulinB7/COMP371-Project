// This is example code for how to use the Shader class I made using learnopengltutorials.com

lightingShader = new Shader("multiLights.vs", "multiLights.fs");

while (!glfwWindowShouldClose(window)) {
  // per-frame time logic
  // --------------------
  float currentFrame = glfwGetTime();
  deltaTime = currentFrame - lastFrame;
  lastFrame = currentFrame;

  // input
  // -----
  processInput(window);
  handleInput(deltaTime);

  updatePlayer(deltaTime);

  // reset viewport
  glViewport(0, 0, windowWidth, windowHeight);
  glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


  // be sure to activate shader when setting uniforms/drawing objects
  lightingShader->use();
  lightingShader->setVec3("viewPos", currentCamera.position);
  lightingShader->setFloat("material.shininess", 16.0f);

  // directional light
  lightingShader->setBool("dirLightOn", dirLightOn);
  lightingShader->setVec3("dirLight.direction", glm::vec3(-5.0f, -0.5f, 0.0f));
  lightingShader->setVec3("dirLight.ambient", glm::vec3(0.5f, 0.5f, 0.5f));
  lightingShader->setVec3("dirLight.diffuse", glm::vec3(0.4f, 0.4f, 0.4f));
  lightingShader->setVec3("dirLight.specular", glm::vec3(0.5f, 0.5f, 0.5f));

  // point light
  lightingShader->setBool("pointLightOn", pointLightOn);
//  lightingShader->setVec3("pointLight.position", currentCamera.position);
  lightingShader->setVec3("poinLight.position", glm::vec3(0, 60, 0));
  lightingShader->setVec3("pointLight.ambient", glm::vec3(0.5f, 0.5f, 0.5f));
  lightingShader->setVec3("pointLight.diffuse", glm::vec3(0.8f, 0.8f, 0.8f));
  lightingShader->setVec3("pointLight.specular", glm::vec3(1.0f, 1.0f, 1.0f));
  lightingShader->setFloat("pointLight.constant", 1.0f);
  lightingShader->setFloat("pointLight.linear", 0.09);
  lightingShader->setFloat("pointLight.quadratic", 0.032);

  // Spotlight Camera
  // spotLight
  lightingShader->setBool("spotLightCameraOn", spotLightCameraOn);
  lightingShader->setVec3("spotLight1.position", currentCamera.position);
  lightingShader->setVec3("spotLight1.direction", currentCamera.lookAt - currentCamera.position);
  lightingShader->setVec3("spotLight1.ambient", glm::vec3(0.5f, 0.5f, 0.5f));
  lightingShader->setVec3("spotLight1.diffuse", glm::vec3(1.0f, 1.0f, 1.0f));
  lightingShader->setVec3("spotLight1.specular", glm::vec3(1.0f, 1.0f, 1.0f));
  lightingShader->setFloat("spotLight1.constant", 1.0f);
  lightingShader->setFloat("spotLight1.linear", 0.09);
  lightingShader->setFloat("spotLight1.quadratic", 0.032);
  lightingShader->setFloat("spotLight1.cutOff", glm::cos(glm::radians(12.5f)));
  lightingShader->setFloat("spotLight1.outerCutOff", glm::cos(glm::radians(15.0f)));

  // Spotlight Player
  // spotLight
  lightingShader->setBool("spotLightPlayerOn", spotLightPlayerOn);
  lightingShader->setVec3("spotLight2.position", player.position + glm::vec3(0, 10.0f, 0));
  lightingShader->setVec3("spotLight2.direction", glm::vec3(0, -10.0f, 0));
  lightingShader->setVec3("spotLight2.ambient", glm::vec3(0.5f, 0.5f, 0.5f));
  lightingShader->setVec3("spotLight2.diffuse", glm::vec3(1.0f, 1.0f, 1.0f));
  lightingShader->setVec3("spotLight2.specular", glm::vec3(1.0f, 1.0f, 1.0f));
  lightingShader->setFloat("spotLight2.constant", 1.0f);
  lightingShader->setFloat("spotLight2.linear", 0.15);
  lightingShader->setFloat("spotLight2.quadratic", 0.02);
  lightingShader->setFloat("spotLight2.cutOff", glm::cos(glm::radians(12.5f)));
  lightingShader->setFloat("spotLight2.outerCutOff", glm::cos(glm::radians(15.0f)));

  lightingShader->setBool("blinn", blinn);

  // view/projection transformations
  glm::mat4 projection = glm::perspective(glm::radians(currentCamera.FOV),
                                          (float) windowWidth / (float) windowHeight,
                                          0.1f, 100.0f);
  glm::mat4 view = currentCamera.getViewMatrix();

  lightingShader->setMat4("projection", projection);
  lightingShader->setMat4("view", view);

  // world transformation
  glm::mat4 model = glm::mat4(1.0f);
  lightingShader->setMat4("model", model);

  renderScene(lightingShader, terrain);
//  drawGrid(lightingShader);

  // This is just a little touch to get the frame rate to show in the program without importing a font library
  char title[10]; // F P S : _ X X . X \0
  snprintf(title, sizeof title, "FPS: %f", 1.0f/deltaTime);
  // display FPS in title
  glfwSetWindowTitle(window, title);

  // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
  // -------------------------------------------------------------------------------
  glfwSwapBuffers(window);
  glfwPollEvents();
}